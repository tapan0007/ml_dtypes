#!/usr/bin/env python3

# Copyright (C) 2017, Amazon.com. All Rights Reserved
#
# Basic minimal suite of TF to Inkling tests
#
# Examples
#   Existence test
#     /bin/rm -rf [0-9]* ; ./RunAll --verbose --test 0-1conv0
#   All tests
#     /bin/rm -rf [0-9]* ; ./RunAll --verbose
#

import os, sys
import argparse

kPath = os.environ.get('KAENA_PATH')
iPath = os.environ.get('INKLING_PATH')
if kPath == None or iPath == None or not os.path.isdir(kPath) or not os.path.isdir(iPath):
  print("ERROR: make sure KAENA_PATH and INKLING_PATH environment is set");
  exit(1)

parser = argparse.ArgumentParser()
parser.add_argument('--test', help='Run specific tests (list)', nargs='+', default=[])
parser.add_argument('--stop_after', help='Supported: frontend, backend (default)', default="backend")
parser.add_argument('--verbose', help='Verbose output', action='store_true', default=False)

args = parser.parse_args()
verbose = args.verbose

if verbose:
  print("\nINFO: started as  ", " ".join(sys.argv))

# test naming
#   level-name
#   level is relative complexity and runtime cost, easiest 0  to most complex 9
#   Name can be composed of anything - 0 can be used as base/existence test
tests = {
  "0-1conv0"      : [ "trivnet_conv1",  "b1-h1-r1-s1-c1-m1-wmin2-wmax2-imin3-imax3", "1conv"],
  "0-2conv0"      : [ "trivnet_conv2",  "b1-h1-r1-s1-c1-m1-wmin2-wmax3-imin5-imax5", "2conv"],
  "0-neg"         : [ "trivnet_conv2",  "b1-Zh1-r1-s1-c1-m1-wmin2-wmax3-imin5-imax5", "I_ALWAYS_FAIL"],
  "0-1conv_tile"  : [ "trivnet_conv1",  "b1-h35-r3-s1-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "0-30conv3"     : [ "trivnet_lin",    "l30-b1-h4-r3-s1-c1-m1-wmin-0.2-wmax0.2-imin-10000-imax10000", "30conv"],
  "0-10conv_relu" : [ "trivnet_lin",    "l10-b1-h4-r3-s1-c1-m1-relu-wmin-0.2-wmax0.4-imin-1000-imax1000", "10cr"],
  "0-116conv_tanh" : [ "trivnet_lin",   "l116-b1-h4-r3-s1-c1-m1-tanh-wmin-0.2-wmax0.8-imin-4-imax8", "116ct"],
  "0-1conv_s2"    : [ "trivnet_conv1",  "b1-h4-r1-s2-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "0-1conv_s8"    : [ "trivnet_conv1",  "b1-h16-r1-s8-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "1-1conv7_64"   : [ "trivnet_conv1",  "b1-h16-r7-s1-c64-m64-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "1-1conv9_64"   : [ "trivnet_conv1",  "b1-h16-r9-s1-c64-m64-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "2-1conv3_64s8" : [ "trivnet_conv1",  "b1-h16-r3-s8-c64-m64-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "2-1conv9_64s8" : [ "trivnet_conv1",  "b1-h16-r9-s8-c64-m64-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
}

testList = sorted(tests)
if len(args.test) > 0:
  testList = args.test

for testName in testList:
  (nnStruct, nnConfig, nnLabel) = tests[testName]
  if verbose:
    print("\n############## %s ##############" % testName)
  cmd = 'mkdir %s && cd %s && make -f $KAENA_PATH/compiler/tffe/test/Makefile %s NN_CONFIG=%s OUT_PREFIX=trivnet_ NN_NAME=%s > log-fe.txt 2>&1 && test -f *.tgz && ' % (testName, testName, nnStruct, nnConfig, nnLabel)
  if args.stop_after == "backend":
    cmd += 'bash $KAENA_PATH/compiler/python/state-buffer-estimate/test/RunOne.sh *tgz > log-be.txt 2>&1 && '
  cmd += 'echo -n PASS || echo -n FAIL; echo "  "' + testName
  if verbose:
    print("Executing ", cmd)
  os.system(cmd)
  
