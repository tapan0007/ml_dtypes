#!/usr/bin/env python3

# Copyright (C) 2017, Amazon.com. All Rights Reserved
#
# Basic minimal suite of TF to Inkling tests
#
# Examples
#   Existence test
#     /bin/rm -rf [0-9]* ; ./RunAll --verbose --test 0-1conv0
#   All tests
#     /bin/rm -rf [0-9]* ; ./RunAll --verbose
#

import os, sys, re, shutil
import argparse
import multiprocessing as mp
import time

kPath = os.environ.get('KAENA_PATH')
kePath = os.environ.get('KAENA_EXT_PATH')
iPath = os.environ.get('INKLING_PATH')

rnDogJpg = "%s/%s" % (kePath, "images/dog.jpg")

class Logger(object):
  def __init__(self, logFile):
    self.default = sys.stdout
    self.log = open(logFile, "w")
  def write(self, msg):
    self.default.write(msg)
    self.log.write(msg)  
  def flush(self):
    self.default.flush()
    self.log.flush()  
sys.stdout = Logger('log-RunAll.txt')
sys.stderr = Logger('log-RunAll.txt')

if kPath == None or kePath == None or iPath == None or \
    not os.path.isdir(kPath) or not os.path.isdir(kePath) or not os.path.isdir(iPath):
  print("ERROR: make sure KAENA_PATH, KAENA_EXT_PATH, and INKLING_PATH environment is set");
  exit(1)

parser = argparse.ArgumentParser()
parser.add_argument('--test', help='Run specific tests (list)', nargs='+', default=[])
parser.add_argument('--verbose', help='Verbose output', action='store_true', default=False)
parser.add_argument('--level', help='Run tests upto this level, default 4', default=4)
parser.add_argument('--parallel', help='Run concurrently, default 8', default=8)

args = parser.parse_args()
verbose = args.verbose
level = int(args.level)
parallel = int(args.parallel)

if verbose:
  print("\nINFO: started as  ", " ".join(sys.argv))

# test naming
#   level-name
#   level is relative complexity and runtime cost, easiest 0  to most complex 9
#   Name can be composed of anything - 0 can be used as base/existence test
testConfigMap = {
  "0-1conv0"      : [ "trivnet_conv1",  "b1-h1-r1-s1-c1-m1-wmin2-wmax2-imin3-imax3", "1conv"],
  "0-1conv0_wave" : [ "trivnet_conv1",  "b1-h1-r1-s1-c1-m1-wmin2-wmax2-imin3-imax3", "1conv", "--scheduler wave"],
  "0-1conv0_h16r2s2_wave"      : [ "trivnet_conv1",  "b1-h16-r2-s2-c1-m1-wmin-2-wmax2-imin-3-imax3", "1conv", "--scheduler wave"],
  "0-1conv0_h16r3s2_wave"      : [ "trivnet_conv1",  "b1-h16-r3-s2-c1-m1-wmin-2-wmax2-imin-3-imax3", "1conv", "--scheduler wave"],
  "0-1conv0_c1h2" : [ "trivnet_conv1",  "b1-h2-r1-s1-c1-m1-wmin2-wmax2-imin1-imax7", "1conv"],
  "0-1conv0_c1h2_wave" : [ "trivnet_conv1",  "b1-h2-r1-s1-c1-m1-wmin2-wmax2-imin1-imax7", "1conv", "--scheduler wave"],
  "0-1conv0_c1h16_wave" : [ "trivnet_conv1",  "b1-h16-r1-s1-c1-m1-wmin2-wmax2-imin3-imax3", "1conv", "--scheduler wave"],
  "0-2conv0"      : [ "trivnet_conv2",  "b1-h1-r1-s1-c1-m1-wmin2-wmax3-imin5-imax5", "2conv"],
  "0-neg"         : [ "trivnet_conv2",  "b1-Zh1-r1-s1-c1-m1-wmin2-wmax3-imin5-imax5", "I_ALWAYS_FAIL"],
  "0-1conv_tile"  : [ "trivnet_conv1",  "b1-h35-r3-s1-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "0-1conv_tile_wave"  : [ "trivnet_conv1",  "b1-h35-r3-s1-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],

  "0-1conv_h4r1_wave"  : [ "trivnet_conv1",  "b1-h4-r1-s1-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],
  "0-1conv_h4r2s2_wave"  : [ "trivnet_conv1",  "b1-h4-r2-s2-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],
  "0-1conv_h6r2s3_wave"  : [ "trivnet_conv1",  "b1-h6-r2-s3-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],
  "0-1conv_h6r3s2_wave"  : [ "trivnet_conv1",  "b1-h6-r3-s2-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],

  "0-1conv_tile_r1_wave"  : [ "trivnet_conv1",  "b1-h35-r1-s1-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],
  "0-1conv_tile_r1h32"  : [ "trivnet_conv1",  "b1-h32-r1-s1-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "0-1conv_tile_r1h32_wave"  : [ "trivnet_conv1",  "b1-h32-r1-s1-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],
  "0-1conv_tile_r1_e1"       : [ "trivnet_conv1",  "b1-h35-r1-s1-c1-m1-F_31_31=3-wmin2-wmax2-imin-0-imax0", "1conv"],
  "0-1conv_tile_r1_e1_wave"  : [ "trivnet_conv1",  "b1-h35-r1-s1-c1-m1-F_31_31=3-wmin2-wmax2-imin-0-imax0", "1conv", "--scheduler wave"],
  "0-2conv3_relu" : [ "trivnet_lin",    "tfloat16-l2-b1-h4-r3-s1-c1-m1-relu-wmin-0.2-wmax0.2-imin-10000-imax10000", "1conv3"],
  "0-2conv3_32b"  : [ "trivnet_lin",    "tfloat32-l2-b1-h4-r3-s1-c1-m1-wmin-1000-wmax1000-imin-10000-imax10000", "2conv32b"],
  "0-30conv3"     : [ "trivnet_lin",    "tfloat16-l30-b1-h4-r3-s1-c1-m1-wmin-0.2-wmax0.2-imin-10000-imax10000", "30conv"],
  "0-10conv_relu" : [ "trivnet_lin",    "tfloat16-l10-b1-h4-r3-s1-c1-m1-relu-wmin-0.2-wmax0.4-imin-1000-imax1000", "10cr"],
  "0-116conv_tanh" : [ "trivnet_lin",   "tfloat16-l116-b1-h4-r3-s1-c1-m1-tanh-wmin-0.2-wmax0.8-imin-4-imax8", "116ct"],
  "0-2conv_pad2"  : [ "trivnet_conv1",  "b1-h4-r2-s1-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "2conv_pad2"],
  "0-2conv_pad2as": [ "trivnet_conv1",  "b1-h2-r2-s1-c1-m1-wmin1-wmax4-imin5-imax8", "2conv_pad2as"],
  "0-2conv_pad3"  : [ "trivnet_conv1",  "b1-h4-r3-s1-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "2conv_pad3"],
  "0-2conv_pad5"  : [ "trivnet_conv1",  "b1-h4-r5-s1-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "2conv_pad5"],
  "0-1conv_s2"    : [ "trivnet_conv1",  "b1-h4-r1-s2-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "0-1conv_s8"    : [ "trivnet_conv1",  "b1-h16-r1-s8-c1-m1-wmin2-wmax2-imin1-imax256", "1conv"],
  "0-1mp0"        : [ "trivnet_mp1",    "b1-h4-r1-s1-c1-m1-wmin0-wmax0-imin1-imax16", "1mp"],
  "0-1mp0c64"     : [ "trivnet_mp1",    "b1-h4-r1-s1-c64-m64-wmin0-wmax0-imin1-imax1024", "1mp"],
  "0-1mp_r3s2"    : [ "trivnet_mp1",    "b1-h5-r3-s2-c1-m1-wmin0-wmax0-imin1-imax25", "1mp"],
  "0-1mp_r3s2_112_55"  : [ "trivnet_mp1", "b1-h112-r3-s2-c1-m1-wmin0-wmax0-imin1-imax12544", "1mp"],
  "0-1ap0"        : [ "trivnet_ap1",    "b1-h4-r1-s1-c1-m1-wmin0-wmax0-imin1-imax16", "1ap"],
  "0-1ap7x7"      : [ "trivnet_ap1",    "b1-h7-r7-s7-c64-m64-wmin0-wmax0-imin1-imax784", "1ap"],
  "0-1conv1pool"       : [ "trivnet_conv_pool", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-MaxPool-k2-d2-wmin2-wmax2-imin1-imax16", "1conv1pool"],
  "0-1conv1pool_wave"  : [ "trivnet_conv_pool", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-MaxPool-k2-d2-wmin2-wmax2-imin1-imax16", "1conv1pool", "--scheduler wave"],
  "0-1conv1avgpool_wave"  : [ "trivnet_conv_pool", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-AvgPool-k2-d2-wmin2-wmax2-imin1-imax16", "1conv1pool", "--scheduler wave"],
  "0-1conv1pool_b5_wave" : [ "trivnet_conv_pool", "tfloat16-b5-h4-r1-s1-c1-m1-SAME-AvgPool-k2-d2-wmin2-wmax2-imin1-imax80", "1conv1pool", "--scheduler wave"],
  "0-1conv1pool_b5m3_wave" : [ "trivnet_conv_pool", "tfloat16-b5-h4-r1-s1-c1-m3-SAME-AvgPool-k2-d2-wmin2-wmax2-imin1-imax240", "1conv1pool", "--scheduler wave"],
  "0-1conv1maxpool_k3d2_wave"  : [ "trivnet_conv_pool", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-MaxPool-k3-d2-wmin2-wmax2-imin1-imax16", "1conv1pool", "--scheduler wave"],
  
  # Conv, BiasAdd
  "0-1conv1ba1"       : [ "trivnet_conv_ba", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-wmin2-wmax2-imin1-imax16-amin1-amax16", "1conv1ba"],
  "0-1conv1ba1_wave"  : [ "trivnet_conv_ba", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-wmin2-wmax2-imin1-imax16-amin3-amax3", "1conv1ba", "--scheduler wave"],

  "0-biasadd"     : [ "trivnet_biasadd", "tfloat16-b1-h2-c1-wmin2-wmax2-imin3-imax6", "biasadd"],
  "0-biasadd_c2"  : [ "trivnet_biasadd", "tfloat16-b1-h2-c2-wmin2-wmax2-imin3-imax6", "biasadd"],
  "0-add"         : [ "trivnet_add",    "tfloat16-b1-h2-c1-wmin2-wmax2-imin3-imax6", "add"],
  "0-add_fp32"    : [ "trivnet_add",    "tfloat32-b1-h17-c4-wmin-0.1-wmax0.1-imin1-imax5", "add"],
  "0-add_uint8"   : [ "trivnet_add",    "tuint8-b1-h4-c3-wmin1-wmax4-imin5-imax53", "add"],

  "0-1conv_s8_32b": [ "trivnet_lin",    "tfloat32-l2-b1-h16-r1-s8-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv32"],
  "1-1conv7_64"   : [ "trivnet_conv1",  "b1-h16-r7-s1-c64-m64-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "1-1conv9_64"   : [ "trivnet_conv1",  "b1-h16-r9-s1-c64-m64-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],

  # Wave graph development tcc reference and tests
  "1-1conv0_wave"      : [ "trivnet_conv1",  "b1-h1-r1-s1-c33-m1-wmin-0.01-wmax0.01-imin-0.02-imax0.02", "1conv", "--scheduler wave"],
  "1-1conv0_c128"           : [ "trivnet_conv1",  "b1-h1-r1-s1-c128-m1-wmin2-wmax2-imin3-imax3", "1conv"],
  "1-1conv0_c128_wave"      : [ "trivnet_conv1",  "b1-h1-r1-s1-c128-m1-wmin-0.01-wmax0.01-imin-0.02-imax0.02", "1conv", "--scheduler wave"],
  "1-1conv0_c256_wave"      : [ "trivnet_conv1",  "b1-h1-r1-s1-c256-m1-wmin-0.01-wmax0.01-imin-0.02-imax0.02", "1conv", "--scheduler wave"],
  "1-1conv0_m64_wave"      : [ "trivnet_conv1",  "b1-h1-r1-s1-c1-m64-wmin1-wmax1-imin2-imax2", "1conv", "--scheduler wave"],
  "1-1conv0_m128_wave"      : [ "trivnet_conv1",  "b1-h1-r1-s1-c1-m128-wmin-0.01-wmax0.01-imin-0.02-imax0.02", "1conv", "--scheduler wave"],
  "1-1conv0_m2_wave"      : [ "trivnet_conv1",  "b1-h1-r1-s1-c1-m2-wmin-0.01-wmax0.01-imin-0.02-imax0.02", "1conv", "--scheduler wave"],
  "1-1conv0_h16c128"        : [ "trivnet_conv1",  "b1-h16-r1-s1-c128-m1-wmin2-wmax2-imin3-imax3", "1conv"],
  "1-1conv0_h16c128_wave"   : [ "trivnet_conv1",  "b1-h16-r1-s1-c128-m1-wmin2-wmax2-imin3-imax3", "1conv", "--scheduler wave"],
  "1-1conv0_h16c256_wave"   : [ "trivnet_conv1",  "b1-h16-r1-s1-c256-m1-wmin2-wmax2-imin3-imax3", "1conv", "--scheduler wave"],
  "1-1conv0_h16c256m64_wave"   : [ "trivnet_conv1",  "b1-h16-r1-s1-c256-m64-wmin2-wmax2-imin3-imax3", "1conv", "--scheduler wave"],
  "1-1conv0_h55c256_wave"   : [ "trivnet_conv1",  "b1-h55-r1-s1-c256-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],
  "1-1conv0_h55c64m256_wave"   : [ "trivnet_conv1",  "b1-h55-r1-s1-c64-m256-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],
  "0-1conv0_h55c256m1_wave" : [ "trivnet_conv1",  "b1-h55-r1-s1-c256-m1-wmin2-wmax2-imin3-imax3", "1conv", "--scheduler wave"],
  "1-1conv0_h55m64_wave"   : [ "trivnet_conv1",  "b1-h55-r1-s1-c1-m64-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],
  "1-1conv0_r3h16c128_wave" : [ "trivnet_conv1",  "b1-h16-r3-s1-c128-m1-wmin2-wmax2-imin3-imax3", "1conv", "--scheduler wave"],
  "1-1conv0_r3h55c256_wave" : [ "trivnet_conv1",  "b1-h55-r3-s1-c256-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv", "--scheduler wave"],

  "2-1conv3_64s8" : [ "trivnet_conv1",  "b1-h16-r3-s8-c64-m64-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "2-1conv9_64s8" : [ "trivnet_conv1",  "b1-h16-r9-s8-c64-m64-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],

  "2-padasym_strd_h3r2s2" : [ "trivnet_conv1", "b1-h3-r2-s2-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "2-padasym_strd_h5r2s2" : [ "trivnet_conv1", "b1-h5-r2-s2-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "2-padasym_strd_h4r2s3" : [ "trivnet_conv1", "b1-h4-r2-s3-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],

  "2-padsym_strd_h3r3s2" : [ "trivnet_conv1", "b1-h3-r3-s2-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "2-padsym_strd_h5r3s2" : [ "trivnet_conv1", "b1-h5-r3-s2-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],
  "2-padsym_strd_h4r3s3" : [ "trivnet_conv1", "b1-h4-r3-s3-c1-m1-wmin-0.1-wmax0.1-imin-0.2-imax0.2", "1conv"],

  # Full c, m in resnet50 are 512, 2048
  "3-rn50_pool2"       : [ "trivnet_conv_pool", "tfloat16-b1-h7-r1-s1-c128-m64-SAME-AvgPool-k7-d7-PERM-wmin-0.1-wmax0.1-imin-1-imax2", "1conv1pool"],
  "3-rn50_pool2_wave"  : [ "trivnet_conv_pool", "tfloat16-b1-h7-r1-s1-c128-m64-SAME-AvgPool-k7-d7-PERM-wmin-0.1-wmax0.1-imin-1-imax2", "1conv1pool", "--scheduler wave"],

  #"5-lstm_ptb"     : [ "tf_pb",          "lstm_ptb_word_lm/ptb_word_lm.pb",  "lstm_ptb", "--input_node Valid/ValidInput/StridedSlice --images linspace1"],
  "6-alexnet"     : [ "tf_pb",          "alexnet_v100/alexnet_fp32.pb",  "alexnet", "--input_node Variable --images linspace1"],
  "8-resnet50"                : [ "tf_pb",   "resnet50/resnet_v1_50_fp32_opt.pb",        "resnet50", "--images linspace1 --depth 2"],
  "8-resnet50_fp32_keras"     : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras.pb",    "resnet50", "--input_node input_1 --images linspace1 --depth 2"],
  "8-resnet50_fp32_keras_opt" : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1 --images linspace1 --depth 2"],
  "8-resnet50_fp16_keras"     : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras.pb",    "resnet50", "--input_node input_1 --images linspace1 --depth 2"],
  "8-resnet50_fp16_keras_opt" : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1 --images linspace1 --depth 2"],
  "8-resnet50_fp16_wave"      : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1 --images linspace1 --depth 2 --scheduler wave"],
  "8-resnet50_fp16_wave_b2"   : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1 --images linspace1 --depth 2 --scheduler wave --batch 2"],
  "8-resnet152"               : [ "tf_pb",   "resnet_v2_152/pb/resnet_v2_152_fp32.pb",   "resnet152", "--images linspace1 --depth 2"],
  
  # Subgraph partioned flow using neural network executor
  "0-add_nne"      : [ "trivnet_add",    "tfloat16-b1-h2-c1-wmin2-wmax2-imin3-imax6", "add", "--partition auto --executors tcc 1 --width 2 --debug 1"],
  "8-rn50_nne_auto" : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1 --images %s --depth 2 --partition auto --executors wave all --debug 1 --scheduler wave" % rnDogJpg],
  "8-rn50_nne_conv" : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1 --images linspace1 --depth 2 --partition conv --executors tcc 2 6 8 13 15 20 22 host 0 --debug 1"],
  "4-rn50_nne_fc"   : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1 --images %s --depth 2 --partition from avg_pool/AvgPool --executors host 0 host 1 --debug 1" % rnDogJpg],
}

# Regression waiver mechanism 
# If the testname matches the regexp then the FAIL status is replaced with
# with the string
testWaiver = [
    ['^0-add',   'WAIVE-RESADD'],
    ['^[4-9]-',  'WAIVE-BENCH'],
    ['_wave',     'WAIVE-WAVESC'],
    ['8-rn50_nne', 'WAIVE-NNE']
  ]


# Filter by level
def getLevel(testName):
  return int(testName[0])
testList = []
for testName in sorted(testConfigMap):
  if getLevel(testName) <= level:
    testList.append(testName)

if len(args.test) > 0:
  testList = args.test

def runCmd(cmd):
  ret = os.system(cmd)
  return(ret)

###############################################################################
# QoR results for one tests
###############################################################################
class QoR:
  @staticmethod
  def simLogGetCycles(filepath):
    cycles = -1
    elapsedTimeSec = -1
    with open(filepath, 'rb') as fh:
      for lineBinary in fh.readlines():
        line = lineBinary.decode('ascii')
        found = re.search('Cycles:\s+(\d+)', line)
        if found:
          cycles = found.group(1)
        found = re.search('ElapsedTimeSec:\s+([\d.]+)', line)
        if found:
          elapsedTimeSec = found.group(1)
    return int(cycles), float(elapsedTimeSec)

  @staticmethod
  def feLogGetOps(filepath):
    ops = 0
    with open(filepath, 'r') as fh:
      for line in fh:
        match = re.search('INFO: total opcount is (\d+)', line)
        if match:
          ops = int(match.groups(1)[0])
    return ops

  def __init__(self, dirName):
    self.freq = 1e9
    self.testName = dirName
    feLog = self.testName + "/" + "log-fe.txt"
    self.tops = 0
    self.ops = 0
    self.cycles = 1
    self.elapsedTimeSec = -1
    self.cyclesPerSec = 0
    if os.path.isfile(feLog):
      self.ops = QoR.feLogGetOps(feLog)
      for subdir, dirs, files in os.walk(dirName):
        for file in files:
          #print(os.path.join(subdir, file))
          filepath = subdir + os.sep + file
          if filepath.endswith(".simres"):
            testName = filepath.split("/")[0]
            assert(testName == self.testName)
            self.cycles, self.elapsedTimeSec = QoR.simLogGetCycles(filepath)
            self.tops = 0
            self.cyclesPerSec = 0
            if self.cycles > 0:
              self.tops = 1.0 * self.ops / self.cycles / 1e12 * self.freq
              if self.elapsedTimeSec > 0:
                self.cyclesPerSec = self.cycles / self.elapsedTimeSec

  @staticmethod
  def printHeader():
    print("%-26s  %-12s  %6s  %16s %16s  %16s %16s  %s" %
          ("Test", "Status", "Tops", "Ops", "SimCycles", "SimTimeSec", "SimCycles/sec", "Description"))
    print("-" * 120)

  def printValues(self, status, description):
    print("%-26s  %-12s  %6.3f  %16g %16g  %16.3f %16g  %s" %
          (self.testName, status, self.tops, self.ops,
           self.cycles, self.elapsedTimeSec, self.cyclesPerSec,
           description))


###############################################################################
# Storage for test name, results
###############################################################################
class Ktest:
  def __init__(self, name, dirName, cmd):
    self.name = name
    self.dir = dirName
    self.cmd = cmd
  def invertStatus(self):
    if self.status == "PASS":
      self.status = "FAIL"
    elif self.status == "FAIL":
      self.status = "PASS"
  def calcStatus(self):
    statusFile = self.dir + "/log-fe.txt"
    self.status = "FAIL"
    if os.path.isfile(statusFile):
      with open(statusFile, 'r') as fh:
        for line in fh.readlines():
          match = re.search('INFO: Kaena flow status (.*)', line)
          if match:
            self.status = match.group(1)
    if self.name == "0-neg":
      self.invertStatus()
  def calcQoR(self):
    self.qor = QoR(self.dir)
  def passed(self):
    return self.status == "PASS"
  def failed(self):
    return self.status == "FAIL"
  
###############################################################################
# Storage for all tests
###############################################################################
class Ktests:
  def __init__(self, testConfigMap, testList, testWaiver):
    self.testConfigMap = testConfigMap
    self.testList = testList
    self.testWaiver = testWaiver
    self.process2test = {}
    self.name2test = {}
    self.processes = []
    self.numRunning = 0
    self.sleepSec = 1
    self.numPass = 0
    self.numFail = 0
    self.msg = ""
    self.statusCount = 0
    self.testDescriptionREs = []
    testDesriptionFile = os.environ["KAENA_PATH"] + "/compiler/tffe/test/test_description.txt"
    with open(testDesriptionFile, 'r') as fh:
      for line in fh:
        match = re.search('(^[^#\s]+)\s+(\S.*)', line)
        if match:
          self.testDescriptionREs.append(match.groups())

  def getNumTests(self):
    return len(self.testList)
    
  def reportStatusWhileRunning(self):
    numAll = self.getNumTests()
    numRun = self.numRunning
    numRunPct = numRun / numAll * 100
    numPass = self.numPass
    numPassPct = numPass / numAll * 100
    numFail = self.numFail
    numFailPct = numFail / numAll * 100
    numOther = numAll - numPass - numFail - numRun
    numOtherPct = numOther / numAll * 100
    if self.statusCount %10 == 0:
      print("\n  #Time      Running    Passed    Failed     Other")
    self.statusCount += 1
    print("  %s  %3d %3.0f%%  %3d %3.0f%%  %3d %3.0f%%  %3d %3.0f%%  %s" %
          (time.strftime("%H:%M:%S"),
           numRun, numRunPct, numPass, numPassPct, numFail, numFailPct, numOther, numOtherPct, self.msg),
          flush=True
         )
    self.msg = ""

  # check for running proceses
  def checkProcesses(self, sleepLimit):
    newProcesses = []
    finishedProcesses = []
    for p in self.processes:
      if p.is_alive():
        newProcesses.append(p)
      else:
        p.join()
        finishedProcesses.append(p)
    self.postprocess(finishedProcesses)
    self.processes = newProcesses
    self.numRunning = len(self.processes)
    self.reportStatusWhileRunning()
    if self.numRunning >= sleepLimit:
      #print(".", end='', flush=True)
      time.sleep(self.sleepSec)
    return(finishedProcesses)

  def getTestByProcess(self, process):
    return self.process2test[process]

  def getTestByName(self, testName):
    return self.name2test[testName]

  def postprocess(self, finishedProcesses):
    for p in finishedProcesses:
      t = self.getTestByProcess(p)
      t.calcStatus()
      t.calcQoR()
      if t.passed():
        self.numPass += 1
      if t.failed():
        self.numFail += 1
      self.msg += "  %s %s" % (t.name, t.status)
  
  # Run tests
  def run(self, parallel):
    self.parallel = parallel
    start_time = time.time()
    self.numRunning = 0
    self.processes = []
    for testName in self.testList:
      # Add default NN args
      if len(self.testConfigMap[testName]) < 4:
        self.testConfigMap[testName].append("")
      (nnStruct, nnConfig, nnLabel, nnArgs) = self.testConfigMap[testName]
      if verbose:
        print("\n############## %s ##############" % testName)
      cmd = 'mkdir %s && cd %s && make -f $KAENA_PATH/compiler/tffe/test/Makefile %s NN_CONFIG=%s OUT_PREFIX=%s_ NN_NAME=%s NN_ARGS="%s" > log-fe.txt 2>&1' % (testName, testName, nnStruct, nnConfig, "trivnet", nnLabel, nnArgs)
      # Remove the old directory
      if os.path.exists(testName):
        oldDir = "%s-old-%d" % (testName, os.getpid())
        #print("DEBUG: renamed %s to %s and removed it" % (testName, oldDir))
        os.rename(testName, oldDir)
        shutil.rmtree(oldDir)

      while self.numRunning >= self.parallel:
        self.checkProcesses(self.parallel)

      if verbose:
        print("Executing ", cmd)
      else:
        self.msg += "  %s START" % testName
      p = mp.Process(target=runCmd, args=(cmd,))
      p.start()
      self.numRunning += 1
      self.processes.append(p)
      t = Ktest(testName, testName, cmd)
      self.process2test[p] = t
      self.name2test[testName] = t

    while self.numRunning > 0:
      self.checkProcesses(0)

    end_time = time.time()
    print("\nDone in %.3f sec" % (end_time - start_time))

  def getTestDescription(self, testName):
    description = "Missing Description"
    for testPattern,Text in self.testDescriptionREs:
      match = re.search(testPattern, testName)
      if match:
        description = Text
    return description

  def calcWaivedStatus(self, testName, status):
    newStatus = status
    if status == "FAIL":
      for regexp,replacementStatus in self.testWaiver:
        if re.search(regexp, testName):
          newStatus = replacementStatus
    return newStatus

  def calcNumWaivedTest(self):
    numWaived  = 0
    for testName in self.testList:
      t = self.getTestByName(testName)
      reportStatus = self.calcWaivedStatus(testName, t.status)
      if 'WAIVE' in reportStatus:
        numWaived += 1
    return numWaived

  def report(self):
    numAll = self.getNumTests()
    numWaived = self.calcNumWaivedTest()
    numPass = self.numPass + numWaived
    numPassPct = numPass / numAll * 100
    print("\nSUMMARY: PASSRATE  %d  %.3f%%  of  %d  (%d were waived)\n" %
          (numPass, numPassPct, numAll, numWaived) )
    QoR.printHeader()
    for testName in self.testList:
      t = self.getTestByName(testName)
      testDescription = self.getTestDescription(testName)
      reportStatus = self.calcWaivedStatus(testName, t.status)
      t.qor.printValues(reportStatus, testDescription)
    
###############################################################################
# Execute
tests = Ktests(testConfigMap, testList, testWaiver)
tests.run(parallel)
tests.report()

