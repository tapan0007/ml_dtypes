#!/usr/bin/env python3

# Copyright (C) 2017, Amazon.com. All Rights Reserved
#
# Basic minimal suite of TF to Inkling tests
#
# Examples
#   Existence test
#     /bin/rm -rf [0-9]* ; ./RunAll --verbose --test 0-1conv0
#   All tests
#     /bin/rm -rf [0-9]* ; ./RunAll --verbose
#

import os, sys, re, shutil, signal, psutil
import argparse
import multiprocessing as mp
import time
import multiprocessing


kPath = os.environ.get('KAENA_PATH')
kePath = os.environ.get('KAENA_EXT_PATH')
iPath = os.environ.get('INKLING_PATH')

rnDogJpg = "%s/%s" % (kePath, "images/dog.jpg")

rnPreFp32 = "%s/%s" % (kPath, "compiler/util/res50_img2fmap_fp32")
rnPreFp16 = "%s/%s" % (kPath, "compiler/util/res50_img2fmap_fp16")
rnPost = "%s/%s" % (kPath, "compiler/util/res50_classify")

class Logger(object):
  def __init__(self, logFile):
    self.default = sys.stdout
    self.log = open(logFile, "w")
  def write(self, msg):
    self.default.write(msg)
    self.log.write(msg)  
  def flush(self):
    self.default.flush()
    self.log.flush()  
sys.stdout = Logger('log-RunAll.txt')
sys.stderr = Logger('log-RunAll.txt')

print("\nINFO: started as  ", " ".join(sys.argv))


if kPath == None or kePath == None or iPath == None or \
    not os.path.isdir(kPath) or not os.path.isdir(kePath) or not os.path.isdir(iPath):
  print("ERROR: make sure KAENA_PATH, KAENA_EXT_PATH, and INKLING_PATH environment is set");
  exit(1)

parser = argparse.ArgumentParser()
parser.add_argument('--test', help='Run specific tests (list)', nargs='+', default=[])
parser.add_argument('--verbose', help='Verbose output', action='store_true', default=False)
parser.add_argument('--show_only', help='Print list of selected tests and exit', action='store_true', default=False)
parser.add_argument('--level', help='Run tests upto this level, default 4', type=int, default=4)
parser.add_argument('--parallel', help='Run concurrently, default is number of cores', type=int, default=multiprocessing.cpu_count())
parser.add_argument('--select', help='Select a specific tests: waived_only, not_waived", default any', default="any")
parser.add_argument('--test_re', help='Similar to --test but select by regexp instead of test name; the --test and --test_re are cumulative", default []', nargs='+', default=[])
parser.add_argument('--timeout', help='Timeout for each test, default 3600', type=int, default=3600)

args = parser.parse_args()
verbose = args.verbose
level = args.level
parallel = args.parallel
select = args.select
selectSet = set(["any", "waived_only", "not_waived"])
if not select in selectSet:
  print("\nERROR: --select must be one of " + str(selectSet))
  sys.exit(1)

if verbose:
  print("\nINFO: started as  ", " ".join(sys.argv))

# test naming
#   level-name
#   level is relative complexity and runtime cost, easiest 0  to most complex 9
#   Name can be composed of anything - 0 can be used as base/existence test
#   Columns: (nnStruct, nnConfig, nnLabel, nnArgs, images)

testConfigMap = {
  "0-1conv0"      : [ "trivnet_conv1",  "tfloat16-b1-h1-r1-s1-c1-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv"],
  "0-1conv0_wave" : [ "trivnet_conv1",  "tfloat16-b1-h1-r1-s1-c1-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "0-1conv0_padvalid_wave" : [ "trivnet_conv1_padvalid",  "tfloat16-b1-h229-r7-s2-c1-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave --debug 3"],
  "0-1conv0_h16r2s2_wave"      : [ "trivnet_conv1",  "tfloat16-b1-h16-r2-s2-c1-m1-wmin-2-wmax2.2-imin-3-imax3.3", "1conv", "--scheduler wave"],
  "0-1conv0_h16r3s2_wave"      : [ "trivnet_conv1",  "tfloat16-b1-h16-r3-s2-c1-m1-wmin-2-wmax2.2-imin-3-imax3.3", "1conv", "--scheduler wave"],
  "0-1conv0_c1h2" : [ "trivnet_conv1",  "tfloat16-b1-h2-r1-s1-c1-m1-wmin2-wmax2.2-imin1-imax7", "1conv"],
  "0-1conv0_c1h2_wave" : [ "trivnet_conv1",  "tfloat16-b1-h2-r1-s1-c1-m1-wmin2-wmax2.2-imin1-imax7", "1conv", "--scheduler wave"],
  "0-1conv0_c1h16_wave" : [ "trivnet_conv1",  "tfloat16-b1-h16-r1-s1-c1-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "0-2conv0"      : [ "trivnet_conv2",  "b1-h1-r1-s1-c1-m1-wmin2-wmax3-imin5-imax5.5", "2conv"],
  "0-neg"         : [ "trivnet_conv2",  "b1-Zh1-r1-s1-c1-m1-wmin2-wmax3-imin5-imax5.5", "I_ALWAYS_FAIL"],
  "0-1conv_tile"  : [ "trivnet_conv1",  "tfloat16-b1-h35-r3-s1-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.25", "1conv"],
  "0-1conv_tile_wave"  : [ "trivnet_conv1",  "tfloat16-b1-h35-r3-s1-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.25", "1conv", "--scheduler wave"],

  "0-1conv_h4r1_wave"  : [ "trivnet_conv1",  "tfloat16-b1-h4-r1-s1-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.25", "1conv", "--scheduler wave"],
  "0-1conv_h4r2s2_wave"  : [ "trivnet_conv1",  "tfloat16-b1-h4-r2-s2-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.25", "1conv", "--scheduler wave"],
  "0-1conv_h6r2s3_wave"  : [ "trivnet_conv1",  "tfloat16-b1-h6-r2-s3-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.25", "1conv", "--scheduler wave"],
  "0-1conv_h6r3s2_wave"  : [ "trivnet_conv1",  "tfloat16-b1-h6-r3-s2-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.25", "1conv", "--scheduler wave"],
  "0-1conv_h4r3s1_wave"  : [ "trivnet_conv1",  "tfloat16-b1-h4-r3-s1-c1-m1-wmin0-wmax9-imin0-imax15", "1conv", "--scheduler wave"],
  "0-1conv_h4r3s1"  : [ "trivnet_conv1",  "tfloat16-b1-h4-r3-s1-c1-m1-wmin0-wmax9-imin0-imax15", "1conv"],

  "0-1conv_tile_r1_wave"  : [ "trivnet_conv1",  "tfloat16-b1-h35-r1-s1-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.25", "1conv", "--scheduler wave"],
  "0-1conv_tile_r1h32"  : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.25", "1conv"],
  "0-1conv_tile_r1h32_wave"  : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.25", "1conv", "--scheduler wave"],
  "0-1conv_tile_r1_e1"       : [ "trivnet_conv1",  "tfloat16-b1-h35-r1-s1-c1-m1-F_31_31=3-wmin2-wmax2-imin-0-imax0", "1conv"],
  "0-1conv_tile_r1_e1_wave"  : [ "trivnet_conv1",  "tfloat16-b1-h35-r1-s1-c1-m1-F_31_31=3-wmin2-wmax2-imin-0-imax0", "1conv", "--scheduler wave"],
  "0-2conv3_relu" : [ "trivnet_lin",    "tfloat16-l2-b1-h4-r3-s1-c1-m1-relu-wmin-0.2-wmax0.24-imin-10000-imax10100", "1conv3"],
  "0-2conv3_32b"  : [ "trivnet_lin",    "tfloat32-l2-b1-h4-r3-s1-c1-m1-wmin-1000-wmax1010-imin-10000-imax10100", "2conv32b"],
  "3-rn50_relu_fp32_wave"  : [ "trivnet_lin","tfloat32-l2-b1-h224-r7-s2-c3-m3-relu-wmin-1-wmax1.1-imin-3-imax3.2", "2conv32b", "--scheduler wave"],
  "3-rn50_ba_relu_fp32_wave"  : [ "trivnet_conv_ba","tfloat32-b1-h224-r7-s2-c3-m64-SAME-relu-wmin-1-wmax1.1-imin-3-imax3.2-amin-3-amax3", "2conv32b", "--scheduler wave"],
  "0-ba_relu_fp32_wave"  : [ "trivnet_conv_ba","tfloat32-b1-h1-r1-s1-c1-m1-SAME-relu-wmin-2-wmax2-imin3-imax10-amin-7-amax7", "2conv32b", "--scheduler wave"],
  "0-30conv3"     : [ "trivnet_lin",    "tfloat16-l30-b1-h4-r3-s1-c1-m1-wmin-0.2-wmax0.22-imin-10000-imax10100", "30conv"],
  "0-10conv_relu" : [ "trivnet_lin",    "tfloat16-l10-b1-h4-r3-s1-c1-m1-relu-wmin-0.2-wmax0.4-imin-1000-imax1010", "10cr"],
  "0-10conv_relu_wave" : [ "trivnet_lin",    "tfloat16-l10-b1-h4-r3-s1-c1-m1-relu-wmin-0.2-wmax0.4-imin-1000-imax1010", "10cr", "--scheduler wave"],
  "0-116conv_tanh" : [ "trivnet_lin",   "tfloat16-l116-b1-h4-r3-s1-c1-m1-tanh-wmin-0.2-wmax0.8-imin-4-imax8", "116ct"],
  "0-116conv_tanh_wave" : [ "trivnet_lin",   "tfloat16-l116-b1-h4-r3-s1-c1-m1-tanh-wmin-0.2-wmax0.8-imin-4-imax8", "116ct", "--scheduler wave"],
  "0-2conv_pad2"  : [ "trivnet_conv1",  "tfloat16-b1-h4-r2-s1-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.22", "2conv_pad2"],
  "0-2conv_pad2as": [ "trivnet_conv1",  "tfloat16-b1-h2-r2-s1-c1-m1-wmin1-wmax4-imin5-imax8", "2conv_pad2as"],
  "0-2conv_pad3"  : [ "trivnet_conv1",  "tfloat16-b1-h4-r3-s1-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.22", "2conv_pad3"],
  "0-2conv_pad5"  : [ "trivnet_conv1",  "tfloat16-b1-h4-r5-s1-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.22", "2conv_pad5"],
  "0-1conv_s2"    : [ "trivnet_conv1",  "tfloat16-b1-h4-r1-s2-c1-m1-wmin-0.1-wmax0.12-imin-0.2-imax0.22", "1conv"],
  "0-1conv_s8"    : [ "trivnet_conv1",  "tfloat16-b1-h16-r1-s8-c1-m1-wmin2-wmax22-imin1-imax256", "1conv"],
  "0-1mp0"        : [ "trivnet_mp1",    "b1-h4-r1-s1-c1-m1-wmin0-wmax0.1-imin1-imax16", "1mp"],
  "0-1mp0c64"     : [ "trivnet_mp1",    "b1-h4-r1-s1-c64-m64-wmin0-wmax0.1-imin1-imax1024", "1mp"],
  "0-1mp_r3s2"    : [ "trivnet_mp1",    "b1-h5-r3-s2-c1-m1-wmin0-wmax0.1-imin1-imax25", "1mp"],
  "0-1mp_r3s2_112_55"  : [ "trivnet_mp1", "b1-h112-r3-s2-c1-m1-wmin0-wmax0.1-imin1-imax12544", "1mp"],
  "0-1ap0"        : [ "trivnet_ap1",    "b1-h4-r1-s1-c1-m1-wmin0-wmax0.1-imin1-imax16", "1ap"],
  "0-1ap7x7"      : [ "trivnet_ap1",    "b1-h7-r7-s7-c64-m64-wmin0-wmax0.1-imin1-imax784", "1ap"],
  "0-1conv1pool"       : [ "trivnet_conv_pool", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-MaxPool-k2-d2-wmin2-wmax2.2-imin1-imax16", "1conv1pool"],
  "0-1conv1pool_wave"  : [ "trivnet_conv_pool", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-MaxPool-k2-d2-wmin2-wmax2.2-imin1-imax16", "1conv1pool", "--scheduler wave"],
  "0-1conv1avgpool_wave"  : [ "trivnet_conv_pool", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-AvgPool-k2-d2-wmin2-wmax2.2-imin1-imax16", "1conv1pool", "--scheduler wave"],
  "0-1conv1pool_b5_wave" : [ "trivnet_conv_pool", "tfloat16-b5-h4-r1-s1-c1-m1-SAME-AvgPool-k2-d2-wmin2-wmax2.2-imin1-imax80", "1conv1pool", "--scheduler wave"],
  "0-1conv1pool_b5m3_wave" : [ "trivnet_conv_pool", "tfloat16-b5-h4-r1-s1-c1-m3-SAME-AvgPool-k2-d2-wmin2-wmax2.2-imin1-imax240", "1conv1pool", "--scheduler wave"],
  "0-1conv1maxpool_k3d2_wave"  : [ "trivnet_conv_pool", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-MaxPool-k3-d2-wmin2-wmax2.2-imin1-imax16", "1conv1pool", "--scheduler wave"],
  
  # Conv, BiasAdd
  "0-1conv1ba1_h4c1m1"       : [ "trivnet_conv_ba", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-wmin2-wmax2.2-imin1-imax16-amin1-amax16", "1conv1ba"],
  "0-1conv1ba1_wave"  : [ "trivnet_conv_ba", "tfloat16-b1-h4-r1-s1-c1-m1-SAME-wmin2-wmax2.2-imin1-imax16-amin3-amax3.2", "1conv1ba", "--scheduler wave"],
  "0-1conv1ba1_h4c1m1_fp32"       : [ "trivnet_conv_ba", "tfloat32-b1-h4-r1-s1-c1-m1-SAME-wmin2-wmax2.2-imin1-imax16-amin1-amax16", "1conv1ba"],
  "0-1conv1ba1_h4c1m1_fp32_wave"  : [ "trivnet_conv_ba", "tfloat32-b1-h4-r1-s1-c1-m1-SAME-wmin2-wmax2.2-imin1-imax16-amin3-amax3.2", "1conv1ba", "--scheduler wave"],
  "0-1conv1ba1_h4c2m2_fp32_wave"  : [ "trivnet_conv_ba", "tfloat32-b1-h4-r1-s1-c2-m2-SAME-wmin2-wmax2.2-imin1-imax16-amin3-amax3.2", "1conv1ba", "--scheduler wave"],
  "0-1conv1ba1_h55c1m1_fp32_wave"  : [ "trivnet_conv_ba", "tfloat32-b1-h55-r1-s1-c1-m1-SAME-wmin2-wmax2.2-imin1-imax16-amin3-amax3.2", "1conv1ba", "--scheduler wave"],
  "0-1conv1ba1_h1c64m64_fp32_wave"  : [ "trivnet_conv_ba", "tfloat32-b1-h1-r1-s1-c64-m64-SAME-wmin2-wmax2.2-imin1-imax16-amin3-amax3.2", "1conv1ba", "--scheduler wave"],
  "0-1conv1ba1_h55c64m64_fp32_wave"  : [ "trivnet_conv_ba", "tfloat32-b1-h55-r1-s1-c64-m64-SAME-wmin2-wmax2.2-imin1-imax16-amin3-amax3.2", "1conv1ba", "--scheduler wave"],
  "0-1conv1ba1_h4c2m2_wave"  : [ "trivnet_conv_ba", "tfloat16-b1-h4-r1-s1-c2-m2-SAME-wmin2-wmax2.2-imin1-imax16-amin3-amax3.2", "1conv1ba", "--scheduler wave"],
  "0-1conv1ba1_h55c1m1_wave"  : [ "trivnet_conv_ba", "tfloat16-b1-h55-r1-s1-c1-m1-SAME-wmin2-wmax2.2-imin1-imax16-amin3-amax3.2", "1conv1ba", "--scheduler wave"],
  "0-1conv1ba1_h1c64m64_wave"  : [ "trivnet_conv_ba", "tfloat16-b1-h1-r1-s1-c64-m64-SAME-wmin2-wmax2.2-imin1-imax16-amin3-amax3.2", "1conv1ba", "--scheduler wave"],
  "0-1conv1ba1_h55c64m64_wave"  : [ "trivnet_conv_ba", "tfloat16-b1-h55-r1-s1-c64-m64-SAME-wmin2-wmax2.2-imin1-imax16-amin3-amax3.2", "1conv1ba", "--scheduler wave"],
  "0-1conv1ba1_fp32_wave"  : [ "trivnet_conv_ba", "tfloat32-b1-h224-r7-s2-c3-m64-SAME-wmin1-wmax1-imin0-imax50175-amin-20000-amax-20000", "1conv1ba", "--scheduler wave"],

  "0-biasadd"     : [ "trivnet_biasadd", "tfloat16-b1-h2-c1-wmin2-wmax2.2-imin3-imax6", "biasadd"],
  "0-biasadd_c2"  : [ "trivnet_biasadd", "tfloat16-b1-h2-c2-wmin2-wmax2.2-imin3-imax6", "biasadd"],
  "0-add"         : [ "trivnet_add",    "tfloat16-b1-h2-c1-wmin2-wmax2.2-imin3-imax6", "add"],
  "0-add_fp32"    : [ "trivnet_add",    "tfloat32-b1-h17-c4-wmin-0.1-wmax0.11-imin1-imax5", "add"],
  "0-add_uint8"   : [ "trivnet_add",    "tuint8-b1-h4-c3-wmin1-wmax4-imin5-imax53", "add"],
  "0-resadd_wave"         : [ "trivnet_add",    "tfloat16-b1-h2-c1-wmin2-wmax2.2-imin3-imax6", "add", "--scheduler wave"],
  "0-resadd_fp32_wave"    : [ "trivnet_add",    "tfloat32-b1-h17-c4-wmin-0.1-wmax0.11-imin1-imax5", "add", "--scheduler wave"],
  "0-resadd_uint8_wave"   : [ "trivnet_add",    "tuint8-b1-h4-c3-wmin1-wmax4-imin5-imax53", "add", "--scheduler wave"],
  "0-3conv_ba_resadd_fp32_wave"  : [ "trivnet_conv_ba_add", "tfloat32-b1-h112-r3-s1-c1-m1-SAME-wmin-1-wmax2-imin-0.1-imax0.3-amin-0.01-amax-0.03", "add", "--scheduler wave"],

  "0-1conv_s8_32b": [ "trivnet_lin",    "tfloat32-l2-b1-h16-r1-s8-c1-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.21", "1conv32"],
  "1-1conv7_64"   : [ "trivnet_conv1",  "tfloat16-b1-h16-r7-s1-c64-m64-wmin-0.1-wmax0.11-imin-0.2-imax0.21", "1conv"],
  "1-1conv9_64"   : [ "trivnet_conv1",  "tfloat16-b1-h16-r9-s1-c64-m64-wmin-0.1-wmax0.11-imin-0.2-imax0.21", "1conv"],

  # Wave graph development tcc reference and tests
  "1-1conv0_wave"      : [ "trivnet_conv1",  "tfloat16-b1-h1-r1-s1-c33-m1-wmin-0.01-wmax0.011-imin-0.02-imax0.022", "1conv", "--scheduler wave"],
  "1-1conv0_c128"           : [ "trivnet_conv1",  "tfloat16-b1-h1-r1-s1-c128-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv"],
  "1-1conv0_c128_wave"      : [ "trivnet_conv1",  "tfloat16-b1-h1-r1-s1-c128-m1-wmin-0.01-wmax0.011-imin-0.022-imax0.023", "1conv", "--scheduler wave"],
  "1-1conv0_c256_wave"      : [ "trivnet_conv1",  "tfloat16-b1-h1-r1-s1-c256-m1-wmin-0.01-wmax0.011-imin-0.022-imax0.023", "1conv", "--scheduler wave"],
  "1-1conv0_m64_wave"      : [ "trivnet_conv1",  "tfloat16-b1-h1-r1-s1-c1-m64-wmin1-wmax1.1-imin2-imax2.2", "1conv", "--scheduler wave"],
  "1-1conv0_m128_wave"      : [ "trivnet_conv1",  "tfloat16-b1-h1-r1-s1-c1-m128-wmin-0.01-wmax0.011-imin-0.02-imax0.022", "1conv", "--scheduler wave"],
  "1-1conv0_m2_wave"      : [ "trivnet_conv1",  "tfloat16-b1-h1-r1-s1-c1-m2-wmin-0.01-wmax0.011-imin-0.02-imax0.022", "1conv", "--scheduler wave"],
  "1-1conv0_h16c128"        : [ "trivnet_conv1",  "tfloat16-b1-h16-r1-s1-c128-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv"],
  "1-1conv0_h16c128_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h16-r1-s1-c128-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h16c256_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h16-r1-s1-c256-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h16c1m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h16-r1-s1-c2-m1-wmin-0.2-wmax0.3-imin-0.1-imax0.2", "1conv", "--scheduler wave"],
  "1-1conv0_h16c2m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h16-r1-s1-c2-m1-wmin-0.2-wmax0.3-imin-0.1-imax0.2", "1conv", "--scheduler wave"],

  "1-1conv0_h16c256m128_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h16-r1-s1-c256-m128-wmin-1-wmax2-imin-1-imax3", "1conv", "--scheduler wave"],
  "1-1conv0_h16c256m128_fp32_wave"   : [ "trivnet_conv1",  "tfloat32-b1-h16-r1-s1-c256-m128-wmin-1-wmax2-imin-1-imax3", "1conv", "--scheduler wave"],

  "1-1conv0_h40c1m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h40-r1-s1-c1-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h40c128m64_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h40-r1-s1-c128-m64-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h40c256m128_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h40-r1-s1-c256-m128-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h40c128m128_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h40-r1-s1-c128-m128-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h40c256m64_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h40-r1-s1-c256-m64-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],

  "1-1conv0_h32c128m64_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c128-m64-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h32c256m128_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c256-m128-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h32c128m128_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c128-m128-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h32c256m64_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c256-m64-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],

  "1-1conv0_h32c1m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c1-m1-wmin0-wmax1-imin0-imax1023", "1conv", "--scheduler wave"],
  "1-1conv0_h32c2m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c2-m1-wmin0-wmax1-imin0-imax1023", "1conv", "--scheduler wave"],
  "1-1conv0_h32c4m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c4-m1-wmin0-wmax1-imin0-imax1023", "1conv", "--scheduler wave"],
  "1-1conv0_h32c8m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c8-m1-wmin0-wmax1-imin0-imax1023", "1conv", "--scheduler wave"],
  "1-1conv0_h32c64m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c64-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h32c128m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c128-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h32c1m2_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c1-m2-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h40c1m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c1-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h40c128m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h32-r1-s1-c128-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],

  "1-1conv0_h28c1m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h28-r1-s1-c1-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h56c1m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h56-r1-s1-c1-m1-wmin-1-wmax2-imin-2-imax3", "1conv", "--scheduler wave"],
  "1-1conv0_h112c1m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h112-r1-s1-c1-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h224c1m1_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h224-r1-s1-c1-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],

  "1-1conv0_h55c256_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h55-r1-s1-c256-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv", "--scheduler wave"],
  "1-1conv0_h55c64m256_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h55-r1-s1-c64-m256-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv", "--scheduler wave"],
  "0-1conv0_h55c256m1_wave" : [ "trivnet_conv1",  "tfloat16-b1-h55-r1-s1-c256-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_h55m64_wave"   : [ "trivnet_conv1",  "tfloat16-b1-h55-r1-s1-c1-m64-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv", "--scheduler wave"],
  "1-1conv0_r3h16c128_wave" : [ "trivnet_conv1",  "tfloat16-b1-h16-r3-s1-c128-m1-wmin2-wmax2.2-imin3-imax3.2", "1conv", "--scheduler wave"],
  "1-1conv0_r3h55c256_wave" : [ "trivnet_conv1",  "tfloat16-b1-h55-r3-s1-c256-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv", "--scheduler wave"],

  "2-1conv3_64s8" : [ "trivnet_conv1",  "tfloat16-b1-h16-r3-s8-c64-m64-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv"],
  "2-1conv9_64s8" : [ "trivnet_conv1",  "tfloat16-b1-h16-r9-s8-c64-m64-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv"],

  "2-padasym_strd_h3r2s2" : [ "trivnet_conv1", "tfloat16-b1-h3-r2-s2-c1-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv"],
  "2-padasym_strd_h5r2s2" : [ "trivnet_conv1", "tfloat16-b1-h5-r2-s2-c1-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv"],
  "2-padasym_strd_h4r2s3" : [ "trivnet_conv1", "tfloat16-b1-h4-r2-s3-c1-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv"],
  "2-padasym_strd_h112r7s2" : [ "trivnet_conv1", "tfloat16-b1-h112-r7-s2-c1-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv"],
  "2-padasym_strd_h112r7s2_wave" : [ "trivnet_conv1", "tfloat16-b1-h112-r7-s2-c1-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv", "--scheduler wave"],
  "2-padasym_strd_h224r7s2_wave" : [ "trivnet_conv1", "tfloat16-b1-h224-r7-s2-c3-m64-wmin-0.1-wmax0.2-imin-0.2-imax0.3", "1conv", "--scheduler wave"],
  "2-padasym_strd_h224r7s2_fp32_wave" : [ "trivnet_conv1", "tfloat32-b1-h224-r7-s2-c3-m64-wmin-0.1-wmax0.2-imin-0.2-imax0.3", "1conv", "--scheduler wave"],

  "2-padsym_strd_h3r3s2" : [ "trivnet_conv1", "tfloat16-b1-h3-r3-s2-c1-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv"],
  "2-padsym_strd_h5r3s2" : [ "trivnet_conv1", "tfloat16-b1-h5-r3-s2-c1-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv"],
  "2-padsym_strd_h4r3s3" : [ "trivnet_conv1", "tfloat16-b1-h4-r3-s3-c1-m1-wmin-0.1-wmax0.11-imin-0.2-imax0.22", "1conv"],

  # Full c, m in resnet50 are 512, 2048
  "3-rn50_pool2"       : [ "trivnet_conv_pool", "tfloat16-b1-h7-r1-s1-c128-m64-SAME-AvgPool-k7-d7-PERM-wmin-0.1-wmax0.1-imin-1-imax2", "1conv1pool"],
  "3-rn50_pool2_wave"  : [ "trivnet_conv_pool", "tfloat16-b1-h7-r1-s1-c128-m64-SAME-AvgPool-k7-d7-PERM-wmin-0.1-wmax0.1-imin-1-imax2", "1conv1pool", "--scheduler wave"],

  # Sprint9 Story 1 milestone - all resnet50 float32 Conv2D layers as unit test
  # The 00 is just for testing the regression harness
  "3-rn50-t00_wave" : [ "trivnet_conv1",  "tfloat32-b1-h1-r1-s1-c1-m1-wmin-1-wmax1.1-imin-3-imax3.2",       "1conv", "--scheduler wave"],
  "3-rn50-01_wave" : [ "trivnet_conv1",  "tfloat32-b1-h14-r3-s1-c256-m256-wmin-1-wmax1.1-imin-3-imax3.2",  "1conv", "--scheduler wave"],
  "3-rn50-02_wave" : [ "trivnet_conv1",  "tfloat32-b1-h14-r1-s1-c256-m1024-wmin-1-wmax1.1-imin-3-imax3.2", "1conv", "--scheduler wave"],
  "3-rn50-03_wave" : [ "trivnet_conv1",  "tfloat32-b1-h14-r1-s1-c1024-m256-wmin-1-wmax1.1-imin-3-imax3.2", "1conv", "--scheduler wave"],
  "3-rn50-04_wave" : [ "trivnet_conv1",  "tfloat32-b1-h55-r1-s1-c64-m256-wmin-1-wmax1.1-imin-3-imax3.2",   "1conv", "--scheduler wave"],
  "3-rn50-05_wave" : [ "trivnet_conv1",  "tfloat32-b1-h28-r3-s1-c128-m128-wmin-1-wmax1.1-imin-3-imax3.2",  "1conv", "--scheduler wave"],
  "3-rn50-06_wave" : [ "trivnet_conv1",  "tfloat32-b1-h28-r1-s1-c128-m512-wmin-1-wmax1.1-imin-3-imax3.2",  "1conv", "--scheduler wave"],
  "3-rn50-07_wave" : [ "trivnet_conv1",  "tfloat32-b1-h55-r3-s1-c64-m64-wmin-1-wmax1.1-imin-3-imax3.2",    "1conv", "--scheduler wave"],
  "3-rn50-08_wave" : [ "trivnet_conv1",  "tfloat32-b1-h7-r3-s1-c512-m512-wmin-1-wmax1.1-imin-3-imax3.2",   "1conv", "--scheduler wave"], 
  "3-rn50-09_wave" : [ "trivnet_conv1",  "tfloat32-b1-h7-r1-s1-c512-m2048-wmin-1-wmax1.1-imin-3-imax3.2",  "1conv", "--scheduler wave"],
  "3-rn50-10_wave" : [ "trivnet_conv1",  "tfloat32-b1-h28-r1-s1-c512-m128-wmin-1-wmax1.1-imin-3-imax3.2",  "1conv", "--scheduler wave"],
  "3-rn50-11_wave" : [ "trivnet_conv1",  "tfloat32-b1-h55-r1-s1-c256-m64-wmin-1-wmax1.1-imin-3-imax3.2",   "1conv", "--scheduler wave"], 
  "3-rn50-12_wave" : [ "trivnet_conv1",  "tfloat32-b1-h7-r1-s1-c2048-m512-wmin-1-wmax1.1-imin-3-imax3.2",  "1conv", "--scheduler wave"], 
  "3-rn50-13_wave" : [ "trivnet_conv1",  "tfloat32-b1-h55-r1-s1-c64-m64-wmin-1-wmax1.1-imin-3-imax3.2",    "1conv", "--scheduler wave"], 
  "3-rn50-14_wave" : [ "trivnet_conv1",  "tfloat32-b1-h28-r1-s2-c512-m256-wmin-1-wmax1.1-imin-3-imax3.2",  "1conv", "--scheduler wave"],
  "3-rn50-15_wave" : [ "trivnet_conv1",  "tfloat32-b1-h28-r1-s2-c512-m1024-wmin-1-wmax1.1-imin-3-imax3.2", "1conv", "--scheduler wave"],
  "3-rn50-16_wave" : [ "trivnet_conv1",  "tfloat32-b1-h224-r7-s2-c3-m64-wmin-1-wmax1.1-imin-3-imax3.2",    "1conv", "--scheduler wave"],
  "3-rn50-17_wave" : [ "trivnet_conv1",  "tfloat32-b1-h55-r1-s2-c256-m512-wmin-1-wmax1.1-imin-3-imax3.2",  "1conv", "--scheduler wave"],
  "3-rn50-18_wave" : [ "trivnet_conv1",  "tfloat32-b1-h55-r1-s2-c256-m128-wmin-1-wmax1.1-imin-3-imax3.2",  "1conv", "--scheduler wave"],
  "3-rn50-19_wave" : [ "trivnet_conv1",  "tfloat32-b1-h14-r1-s2-c1024-m512-wmin-1-wmax1.1-imin-3-imax3.2",  "1conv", "--scheduler wave"],
  "3-rn50-20_wave" : [ "trivnet_conv1",  "tfloat32-b1-h14-r1-s2-c1024-m2048-wmin-1-wmax1.1-imin-3-imax3.2", "1conv", "--scheduler wave"],

  #"5-lstm_ptb"     : [ "tf_pb",          "lstm_ptb_word_lm/ptb_word_lm.pb",  "lstm_ptb", "--input_node Valid/ValidInput/StridedSlice ", "linspace1"],
  "6-alexnet"     : [ "tf_pb",          "alexnet_v100/alexnet_fp32.pb",  "alexnet", "--input_node Variable ", "linspace1"],
  "8-resnet50"                : [ "tf_pb",   "resnet50/resnet_v1_50_fp32_opt.pb",        "resnet50", " --depth 2", "linspace1"],
  "8-resnet50_fp32_keras"     : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras.pb",    "resnet50", "--input_node input_1  --depth 2", "linspace1"],
  "8-resnet50_fp32_keras_opt" : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2", "linspace1"],
  "8-resnet50_fp16_keras"     : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras.pb",    "resnet50", "--input_node input_1  --depth 2", "linspace1"],
  "8-resnet50_fp16_keras_opt_b16" : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1  --depth 2 --batch 16", "linspace1"],
  "8-resnet50_fp16_keras_opt" : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1  --depth 2", "linspace1"],
  "8-resnet50_fp16_wave"      : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1  --depth 2 --scheduler wave", "linspace1"],
  "8-resnet50_fp32_wave"      : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2 --scheduler wave", "linspace1"],
  "8-resnet50_fp16_wave_b2"   : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1  --depth 2 --scheduler wave --batch 2", "linspace1"],
  #"8-resnet152"               : [ "tf_pb",   "resnet_v2_152/pb/resnet_v2_152_fp32.pb",   "resnet152", " --depth 2", "linspace1"],
  
  # Subgraph partioned flow using neural network executor
  "0-add_nne"      : [ "trivnet_add",    "tfloat16-b1-h2-c1-wmin2-wmax2.2-imin3-imax6", "add", "--partition auto --executors host all tcc 1 --width 2 --debug 1"],
  "0-4conv_relu_nne" : [ "trivnet_lin",    "tfloat16-l3-b1-h4-r3-s1-c1-m1-relu-wmin-0.2-wmax0.4-imin-1-imax2", "4conv_nne", "--partition conv --executors tcc 1 3 host 0 2 4 --debug 1 --scheduler wave"],


  # Resnet
  "8-rn50_nne_auto" : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition auto --executors wave all  --scheduler wave" % (rnPreFp16, rnPost) , rnDogJpg],
  "8-rn50_nne_fp32_meauto" : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition meauto --executors wave all host 17  --scheduler wave" % (rnPreFp32, rnPost) , rnDogJpg],
  #"8-rn50_nne_conv" : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition conv --executors tcc 2 6 8 13 15 20 22 host 0 " % (rnPreFp16, rnPost), "linspace1"],
  "4-rn50_nne_fc"   : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition from avg_pool/AvgPool --executors host 0 host 1 " % (rnPreFp16, rnPost) , rnDogJpg],
  "4-rn50_matmul_fp32_wave"   : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition from avg_pool/AvgPool --executors host 0 wave 1 " % (rnPreFp32, rnPost) , rnDogJpg],
  "4-rn50_nne_from1_wave"   : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition from bn_conv1/batchnorm_1/add_1   --executors wave 0 host 1  --scheduler wave" % (rnPreFp32, rnPost) , rnDogJpg],
  "4-rn50_nne_from2_wave"   : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition from activation_1/Relu   --executors wave 0 host 1  --scheduler wave" % (rnPreFp32, rnPost) , rnDogJpg],
  "4-rn50_nne_from3_wave"   : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition from max_pooling2d_1/MaxPool   --executors wave 0 host 1  --scheduler wave" % (rnPreFp32, rnPost) , rnDogJpg],
  "7-rn50_nne_fc_waveopt"     : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition from fc1000/Softmax --executors waveopt 0 host 1  --scheduler wave" % (rnPreFp16, rnPost) , rnDogJpg],
  "7-rn50_nne_fp32_waveopt"   : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition from fc1000/Softmax --executors waveopt 0 host 1  --scheduler wave" % (rnPreFp32, rnPost) , rnDogJpg],
  "7-rn50_nne_fp32_wave"   : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition from fc1000/Softmax --executors wave 0 host 1  --scheduler wave" % (rnPreFp32, rnPost) , rnDogJpg],
  "7-rn50_nne_fc_wave"     : [ "tf_pb",   "resnet50_keras/resnet50_fp16_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition from avg_pool/AvgPool --executors wave 0 host 1  --scheduler wave" % (rnPreFp16, rnPost) , rnDogJpg],
  "7-rn50_nne_conv_wave" : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s --partition conv --executors host all wave 01 03 04 07 09 12 14 16 19 21 23 26 27 30 32 35 37 39 42 44 46 49 51 53 56 57 60 62 65 67 69 72 74 76 79 81 83 86 88 90 93 95 97 100 101 104 106 109 111 113 116 118 120  --scheduler wave" % (rnPreFp32, rnPost) , rnDogJpg],
  "7-rn50_nne_fp32_host"   : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", "--input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s   --partition from fc1000/Softmax --executors host all " % (rnPreFp32, rnPost), rnDogJpg],


  # Matmult
  "4-rn50_matmul_fp32_wave"   : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", " --input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s  --partition from avg_pool/AvgPool --executors host 0 wave 1 --scheduler wave"% (rnPreFp32, rnPost), rnDogJpg],
  "4-rn50_matmul_fp32_waveopt"   : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", " --input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s  --partition from avg_pool/AvgPool --executors host 0 waveopt 1 --scheduler wave"% (rnPreFp32, rnPost), rnDogJpg],
  "4-rn50_matmul_nosm_fp32_wave"   : [ "tf_pb",   "resnet50_keras/resnet50_fp32_keras_opt.pb","resnet50", " --input_node input_1  --depth 2  --debug 1 --preprocessor %s --postprocessor %s  --partition from avg_pool/AvgPool fc1000/Softmax --executors host 0 2 wave 1 --scheduler wave" % (rnPreFp32, rnPost), rnDogJpg],

}

# Regression waiver mechanism 
# If the testname matches the regexp then the FAIL status is replaced with
# with the string
testWaiver = [
    ['0-1conv1maxpool_k3d2_wave',   'WAIVE_WAVESC'],
    ['0-1conv1pool_b5_wave',        'WAIVE_WAVESC'],
    ['0-1conv1pool_b5m3_wave',      'WAIVE_WAVESC'],

    ['^0-add$',   'WAIVE-RESADD'],
    ['^0-add_fp32',   'WAIVE-RESADD'],
    ['^0-add_uint8',   'WAIVE-RESADD'],

    # ME does not support resadd as the first op which is ok
    ['^0-resadd.*_wave$', 'WAIVE-RESADD_ME'],

    ['1-1conv0_r3h55c256_wave',     'WAIVE_WAVESC'],

    ['4-rn50_matmul_fp32_wave$',      'WAIVE-S10_BE_SOFTMAX'],

    ['^[6]-alexnet',  'WAIVE-BENCH'],
    ['7-rn50_nne_fc_wave$', 'WAIVE-WAVESC'],

    ['^[8]-resnet152',  'WAIVE-BENCH'],
    ['^[8]-resnet50',  'WAIVE-BENCH'],
    ['8-rn50_nne_auto', 'WAIVE-NNE'],
    
    # ME accuracy failure
    ['0-116conv_tanh_wave', 'WAIVE-ME_ACC'],
    
    
  ]

def getLevel(testName):
  return int(testName[0])

def calcIsWaived(testName, testWaiver):
  # Linear search for now is ok
  for regexp,replacementStatus in testWaiver:
    if re.search(regexp, testName):
      return True
  return False


def selectTests(testConfigMap, testWaiver, arglevel, argTest, argTestRe, argSelect):
  testList = []
  # Filter by level and select method
  for testName in sorted(testConfigMap):
    isWaived = calcIsWaived(testName, testWaiver)
    if getLevel(testName) <= level:
      if argSelect == "any" or (isWaived and argSelect == "waived_only") or ((not isWaived) and argSelect == "not_waived"):
        testList.append(testName)
  # Override by --test
  if len(argTest) > 0 or len(argTestRe) > 0:
    wrongTests = []
    for t in args.test:
      if not t in testConfigMap:
        wrongTests.append(t)
    if len(wrongTests) > 1:
      print("ERROR: the --test %s   do not exist" % str(wrongTests))
      sys.exit(1)
    testList = args.test
  #Add
  if len(argTestRe) > 0:
    for testName in sorted(testConfigMap):
      for regexp in argTestRe:
        if re.search(regexp, testName):
          testList.append(testName)
  # Remove duplicates
  testList = sorted(list(set(testList)))
  return testList


def runCmd(cmd):
  ret = os.system(cmd)
  return(ret)

###############################################################################
# QoR results for one tests
###############################################################################
class QoR:
  @staticmethod
  def simLogGetCycles(filepath):
    cycles = -1
    elapsedTimeSec = -1
    with open(filepath, 'rb') as fh:
      for lineBinary in fh.readlines():
        line = lineBinary.decode('ascii')
        found = re.search('Cycles:\s+(\d+)', line)
        if found:
          cycles = found.group(1)
        found = re.search('ElapsedTimeSec:\s+([\d.]+)', line)
        if found:
          elapsedTimeSec = found.group(1)
    return int(cycles), float(elapsedTimeSec)

  @staticmethod
  def feLogGetOps(filepath):
    ops = 0
    with open(filepath, 'r') as fh:
      for line in fh:
        match = re.search('INFO: total opcount is (\d+)', line)
        if match:
          ops = int(match.groups(1)[0])
    return ops

  def __init__(self, dirName):
    self.freq = 1e9
    self.testName = dirName
    feLog = self.testName + "/" + "log-fe.txt"
    self.tops = 0
    self.ops = 0
    self.cycles = 1
    self.elapsedTimeSec = -1
    self.cyclesPerSec = 0
    if os.path.isfile(feLog):
      self.ops = QoR.feLogGetOps(feLog)
      for subdir, dirs, files in os.walk(dirName):
        for file in files:
          #print(os.path.join(subdir, file))
          filepath = subdir + os.sep + file
          if filepath.endswith(".simres"):
            testName = filepath.split("/")[0]
            assert(testName == self.testName)
            self.cycles, self.elapsedTimeSec = QoR.simLogGetCycles(filepath)
            self.tops = 0
            self.cyclesPerSec = 0
            if self.cycles > 0:
              self.tops = 1.0 * self.ops / self.cycles / 1e12 * self.freq
              if self.elapsedTimeSec > 0:
                self.cyclesPerSec = self.cycles / self.elapsedTimeSec

  @staticmethod
  def printHeader():
    print("%-32s  %-16s  %6s  %16s %16s  %16s %16s  %10s  %s" %
          ("Test", "Status", "Tops", "Ops", "SimCycles", "SimTimeSec", "SimCycles/sec", "TotTimeSec", "Description"))
    print("-" * 150)

  def printValues(self, status, testTime, description):
    print("%-32s  %-16s  %6.3f  %16g %16g  %16.3f %16g  %10.1f  %s" %
          (self.testName, status, self.tops, self.ops,
           self.cycles, self.elapsedTimeSec, self.cyclesPerSec,
           testTime, description))


###############################################################################
# Storage for test name, results
###############################################################################
class Ktest:
  def __init__(self, name, dirName, cmd):
    self.name = name
    self.dir = dirName
    self.cmd = cmd
    self.startTime = time.time()
    self.testTime = -1
    self.status = "UNKNOWN"
  def invertStatus(self):
    if self.status == "PASS":
      self.status = "FAIL"
    elif self.status == "FAIL":
      self.status = "PASS"
  def calcRTStatus(self):
    statusFile = self.dir + "/log-rt.txt"
    self.status_rt = "FAIL"
    if os.path.isfile(statusFile):
      with open(statusFile, 'r') as fh:
        for line in fh.readlines():
          match = re.search('INFO: Kaena RT status (.*)', line)
          if match:
            self.status_rt = match.group(1)
  def calcKCCStatus(self):
    statusFile = self.dir + "/log-fe.txt"
    self.status_kcc = "FAIL"
    if os.path.isfile(statusFile):
      with open(statusFile, 'r') as fh:
        for line in fh.readlines():
          match = re.search('INFO: Kaena Compiler status (.*)', line)
          if match:
            self.status_kcc = match.group(1)

  # Middle end or other intermediate status
  def calcAltStatus(self):
    statusFile = self.dir + "/log-me.txt"
    self.altStatus = "None"
    if os.path.isfile(statusFile):
      with open(statusFile, 'r') as fh:
        for line in fh.readlines():
          match = re.search('^PASSED$', line)
          if match:
            self.altStatus = "PASS"

  def calcStatus(self):
    self.calcRTStatus()
    self.calcKCCStatus()
    self.calcAltStatus()
    if not self.status == "TIMEOUT":
      self.status = "PASS"
      if (self.status != self.status_kcc or self.status != self.status_rt):
        self.status = "FAIL"
      if self.name == "0-neg":
        self.invertStatus()

  def calcQoR(self):
    self.qor = QoR(self.dir)
  def passed(self):
    return self.status == "PASS"
  def failed(self):
    return self.status == "FAIL"
  def timedout(self):
    return self.status == "TIMEOUT"
  def exceededTimeout(self, timeout):
    #print("DEBUG: checking test  %s  for timeout  %f > %f" % (self.name, time.time() - self.startTime, timeout))
    return time.time() > self.startTime + timeout
  def setStatusTimeout(self):
    self.status = "TIMEOUT"
  
###############################################################################
# Storage for all tests
###############################################################################
class Ktests:
  def __init__(self, testConfigMap, testList, testWaiver, testTimeout):
    self.testConfigMap = testConfigMap
    self.testList = testList
    self.testWaiver = testWaiver
    self.testTimeout = testTimeout
    self.startTime = time.time()
    self.process2test = {}
    self.name2test = {}
    self.processes = []
    self.numRunning = 0
    self.sleepSec = 1
    self.numPass = 0
    self.numFail = 0
    self.msg = ""
    self.statusCount = 0
    self.testDescriptionREs = []
    testDesriptionFile = os.environ["KAENA_PATH"] + "/compiler/tffe/test/test_description.txt"
    with open(testDesriptionFile, 'r') as fh:
      for line in fh:
        match = re.search('(^[^#\s]+)\s+(\S.*)', line)
        if match:
          self.testDescriptionREs.append(match.groups())

  def getNumTests(self):
    return len(self.testList)
    
  def reportStatusWhileRunning(self):
    numAll = self.getNumTests()
    numRun = self.numRunning
    numRunPct = numRun / numAll * 100
    numPass = self.numPass
    numPassPct = numPass / numAll * 100
    numFail = self.numFail
    numFailPct = numFail / numAll * 100
    numOther = numAll - numPass - numFail - numRun
    numOtherPct = numOther / numAll * 100
    if self.statusCount %60 == 0:
      print("\n  #Time    Running    Passed    Failed     Other")
    if self.msg or self.statusCount %10 == 0:
      print("  %6s  %3d %3.0f%%  %3d %3.0f%%  %3d %3.0f%%  %3d %3.0f%%  %s" %
            (int(time.time() - self.startTime),
             numRun, numRunPct, numPass, numPassPct, numFail, numFailPct, numOther, numOtherPct, self.msg),
            flush=True
           )
    self.statusCount += 1
    self.msg = ""

  # check for running proceses
  def checkProcesses(self, sleepLimit):
    newProcesses = []
    finishedProcesses = []
    for p in self.processes:
      if p.is_alive():
        newProcesses.append(p)
        t = self.getTestByProcess(p)
        if t.exceededTimeout(self.testTimeout):
          time.sleep(0.01)
          
          # The terminate does not correctly signal to all
          # transitive child processes so signal explicitly
          try:
            proc = psutil.Process(p.pid)
            children = proc.children(recursive=True)
            for process in children:
              #print("DEBUG: terminating child %d" % process.pid)
              process.send_signal(signal.SIGTERM)
          except psutil.NoSuchProcess:
            #print("DEBUg: missing process")
            pass
          
          #os.kill(p.pid, signal.SIGKILL)
          #os.killpg(os.getpgid(p.pid), signal.SIGKILL)
          p.terminate()
          t.setStatusTimeout()
      else:
        p.join()
        finishedProcesses.append(p)
    self.postprocess(finishedProcesses)
    self.processes = newProcesses
    self.numRunning = len(self.processes)
    self.reportStatusWhileRunning()
    if self.numRunning >= sleepLimit:
      #print(".", end='', flush=True)
      time.sleep(self.sleepSec)
    return(finishedProcesses)

  def getTestByProcess(self, process):
    return self.process2test[process]

  def getTestByName(self, testName):
    return self.name2test[testName]

  def postprocess(self, finishedProcesses):
    for p in finishedProcesses:
      t = self.getTestByProcess(p)
      t.calcStatus()
      t.calcAltStatus()
      t.calcQoR()
      if t.passed():
        self.numPass += 1
      if t.failed() or t.timedout():
        self.numFail += 1
      reportStatus = self.calcWaivedStatus(t.name, t.status)
      self.msg += "  %s %s" % (t.name, reportStatus)
      if not t.status == "TIMEOUT":
        t.testTime = time.time() - t.startTime
  
  # Run tests
  def run(self, parallel):
    self.parallel = parallel
    start_time = time.time()
    self.numRunning = 0
    self.processes = []
    for testName in self.testList:
      # Add default NN args
      while len(self.testConfigMap[testName]) < 5:
        self.testConfigMap[testName].append("")
      (nnStruct, nnConfig, nnLabel, nnArgs, images) = self.testConfigMap[testName]
      if verbose:
        print("\n############## %s ##############" % testName)

      cmd = 'ulimit -t %d; ulimit -H -t %d; mkdir %s && cd %s && make -f $KAENA_PATH/compiler/tffe/test/Makefile %s NN_CONFIG=%s OUT_PREFIX=%s_ NN_NAME=%s NN_ARGS="%s" ' % (self.testTimeout, self.testTimeout, testName, testName, nnStruct, nnConfig, "trivnet", nnLabel, nnArgs)
      if images != "":
        cmd += ' IMAGES="%s" '%(images)
      cmd +=  ' > log-top.txt 2>&1'
      # Remove the old directory
      if os.path.exists(testName):
        oldDir = "%s-old-%d" % (testName, os.getpid())
        #print("DEBUG: renamed %s to %s and removed it" % (testName, oldDir))
        os.rename(testName, oldDir)
        shutil.rmtree(oldDir)

      while self.numRunning >= self.parallel:
        self.checkProcesses(self.parallel)

      if verbose:
        print("Executing ", cmd)
      else:
        self.msg += "  %s START" % testName
      p = mp.Process(target=runCmd, args=(cmd,))
      #p.daemon = True
      p.start()
      self.numRunning += 1
      self.processes.append(p)
      t = Ktest(testName, testName, cmd)
      self.process2test[p] = t
      self.name2test[testName] = t

    while self.numRunning > 0:
      self.checkProcesses(0)

    end_time = time.time()
    print("\nDone in %.3f sec" % (end_time - start_time))

  def getTestDescription(self, testName):
    description = "Missing Description"
    for testPattern,Text in self.testDescriptionREs:
      match = re.search(testPattern, testName)
      if match:
        description = Text
    return description

  def calcWaivedStatus(self, testName, status):
    newStatus = status
    newTmpStatus = None
    for regexp,replacementStatus in self.testWaiver:
      if re.search(regexp, testName):
        newTmpStatus = replacementStatus
    if not newTmpStatus == None:
      if status == "FAIL":
        newStatus = newTmpStatus
      elif status == "PASS":
        newStatus = "%s_%s" % (status, newTmpStatus)
    return newStatus

  def calcNumWaivedTest(self):
    numWaived  = 0
    for testName in self.testList:
      t = self.getTestByName(testName)
      reportStatus = self.calcWaivedStatus(testName, t.status)
      if 'WAIVE' in reportStatus and not 'PASS' in reportStatus:
        numWaived += 1
    return numWaived

  def report(self):
    numAll = self.getNumTests()
    numWaived = self.calcNumWaivedTest()
    numPass = self.numPass + numWaived
    numPassPct = numPass / numAll * 100
    print("\nSUMMARY: PASSRATE  %d  %.3f%%  of  %d  (%d were waived)\n" %
          (numPass, numPassPct, numAll, numWaived) )
    
    status2count = {}
    status2test = {}
    for testName in self.testList:
      t = self.getTestByName(testName)
      reportStatus = self.calcWaivedStatus(testName, t.status)
      count = status2count.get(reportStatus, 0)
      status2count[reportStatus] = count + 1
      if not reportStatus in status2test:
        status2test[reportStatus] = []
      status2test[reportStatus].append(testName)
    strStatus = ""
    for status in sorted(status2count):
      strStatus += "%s %d  " % (status, status2count[status])
    print("DETAILED STATUS: ", strStatus)
    for status in sorted(status2test):
      print("  %s" % status)
      for test in sorted(status2test[status]):
        print("    ", test)
    print("\n")
    
    QoR.printHeader()
    for testName in self.testList:
      t = self.getTestByName(testName)
      testDescription = self.getTestDescription(testName)
      reportStatus = self.calcWaivedStatus(testName, t.status)
      t.qor.printValues(reportStatus, t.testTime, testDescription)

  def dashboard(self, testRe, outFileName):
    with open(outFileName, "w") as fh:
      fh.write("Test description is in  https://sim.amazon.com/issues/kaena-163\n")
      fh.write("%-20s  %-12s  %-12s\n" % ("Test", "MeStatus", "Status"))
      fh.write("-" * 79 + "\n")
      countAll = 0
      countPass = 0
      for testName in self.testList:
        if re.search(testRe, testName):
          t = self.getTestByName(testName)
          fh.write("%-20s  %-12s  %-12s\n" % (testName, t.altStatus, t.status))
          if t.status == 'PASS':
            countPass += 1
          countAll += 1
      if countAll == 0:
        countAll = 1
      fh.write("-" * 79 + "\n" + "PASSRATE  %d of %d  %.3f%%\n" % (countPass, countAll, 100 * countPass / countAll))
    print("INFO: wrote dashboard status into %s" % outFileName)
      
    
###############################################################################
# Execute
testList = selectTests(testConfigMap, testWaiver, args.level, args.test, args.test_re, args.select)
if args.show_only:
  print("INFO: --show_only mode: selected tests are " + str(testList))
else:
  tests = Ktests(testConfigMap, testList, testWaiver, args.timeout)
  tests.run(parallel)
  tests.report()
  tests.dashboard('3-rn50-\d+_wave', "sprint9-dashboard.txt")
