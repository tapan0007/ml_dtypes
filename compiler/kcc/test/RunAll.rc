fn Error { echo >[1=2] $* }
fn Fatal { Error '>>>' $*; exit 1 }
fn RunCmd  {
   #sleep 3
   echo $*
   $*
}

switch ($#*) {
case 0
    Fatal Usage $0 NUMBER
}
N=$1

fn Run { f=$1 {
    rc LINK $f
    rc RUNONE $f
}}

All=( ${ cat Files} )

for (d in $All) {
    Run $d
}
N=$1

##############################################################

NET=trivnet

CPP=$NET.cpp
OBJ=$NET.obj
EXE=$NET-exe

RESULTS=./results/$N
rm -fR $RESULTS; mkdir $RESULTS

ASM=$RESULTS/$NET.asm
TPB=$RESULTS/$NET.tpb

SIMRES=$RESULTS/$NET.simres
SIMLOG=$RESULTS/simulation.log
LOG=$RESULTS/LOG

##############################################################
TOP=$KAENA_PATH/compiler/python/state-buffer-estimate
TEST=$TOP/test
##############################################################
##############################################################
{

cd  $TOP
pwd
TopCleanFiles=( $CPP $OBJ )
RunCmd rm -f $TopCleanFiles

RunCmd make $NET || Fatal Failed to make $NET
shasum $CPP

cd  $TOP/test
pwd
#BottomCleanFiles=($OBJ $EXE $TPB  $ASM $RESULTS/*-out.npy $SIMLOG $SIMRES $RESULTS/*.txt)
RunCmd make $EXE || Fatal Failed make $EXE
cp -p $CPP $RESULTS/.
RunCmd ./$EXE $TPB || Fatal Failed $EXE $TPB

RunCmd ./objdump $TPB > $ASM || Fatal Failed to create $ASM

RunCmd shasum $TPB
echo ./sim $TPB
./sim $TPB >$SIMRES || Fatal Sim failed on $TPB
outNpy = ${ egrep -A 1 compile_write_ofmap $CPP |
            tail -n 1 | sed -e 's/^ *"//' -e 's/.npy".*//' }
echo Out npy: $outNpy
Files=(
    golden
    $outNpy
)
FMTS = (    
    # int16
    float16
)

for (fmt in $FMTS) {
    for (file in $Files) {
        npy=$file.npy
        txt=$RESULTS/$file-$fmt.txt
        echo dumpnpy --$fmt $npy '>' $txt
        dumpnpy --$fmt $npy > $txt
        shasum  $txt
        cat $txt
    }
}

#echo GOLDEN:
#cat goldn-float16.txt
#echo FROM SIM:
#cat $NET-out-float16.txt
} >[2=1] | tee $LOG

