#!/usr/bin/env python3

# Generator of neural networks for unit testing of Kaena compiler flow
# Variables - match teh TPB spec
#  h - image heights (and width)
#  c - channels - number of IFMAPs
#  m - outputs - number of OFMAPs
#  b - batch
#  s - stride
#  r - filter (height and width)
#  w - weight value range bound
#  i - input image value range bound


import numpy as np
import os, sys, argparse
import random

if 0:

  # Basic sweep from October 2017
  b = 1
  s = 1
  id = 0
  for i in [0.02, 0.2]:
    for w in [0.01, 0.1]:
      for m in [1, 4, 64]:
        for c in [1, 4, 64]:
          for r in [1, 3]:
            for h in [3, 8, 16, 32]:
              id += 1
              conf = "b%d-h%d-r%d-s%d-c%d-m%d-" % (b, h, r, s, c, m) +  "wmin%g-wmax%g-imin%g-imax%g" % (-w, w, -i, i)
              dir = "s%04d_%s" % (id, conf)
              cmd = 'mkdir %s; cd %s && ' % (dir, dir)
              cmd += 'make -f $KAENA_PATH/compiler/tffe/test/Makefile trivnet_conv1 NN_CONFIG=%s OUT_PREFIX=trivnet_ NN_NAME=1conv &&' % (conf)
              cmd += 'bash $KAENA_PATH/compiler/python/state-buffer-estimate/test/RunOne.sh *tgz > log-be.txt 2>&1 && '
              cmd += 'echo -n PASS || echo -n FAIL; echo "  "' + dir
              print("\n", cmd)
              os.system(cmd)
              #exit(1)

elif 0:

  # Custom sweep Jan 2018 - for Drazen padding+striding debug
  b = 1
  i = 0.2
  w = 0.1
  m = 1
  c = 1
  
  id = 0
  for s in [1, 2, 3, 4, 8]:
    for r in [1, 2, 3, 4, 5, 7]:
      for h in [2, 3, 4, 5, 6, 7, 14]:
        id += 1
        conf = "b%d-h%d-r%d-s%d-c%d-m%d-" % (b, h, r, s, c, m) +  "wmin%g-wmax%g-imin%g-imax%g" % (-w, w, -i, i)
        dir = "s%04d_%s" % (id, conf)
        cmd = 'mkdir %s; cd %s && ' % (dir, dir)
        cmd += 'make -f $KAENA_PATH/compiler/tffe/test/Makefile trivnet_conv1 NN_CONFIG=%s OUT_PREFIX=trivnet_ NN_NAME=1conv > log-fe.txt 2>&1 &&' % (conf)
        cmd += 'bash $KAENA_PATH/compiler/python/state-buffer-estimate/test/RunOne.sh *tgz > log-be.txt 2>&1 && '
        cmd += 'echo -n PASS || echo -n FAIL; echo "  "' + dir
        print("\n", cmd)
        os.system(cmd)
        #exit(1)
elif 1:

  # Custom sweep Jan 2018 - for tiling debug
  print("INFO: Custom tiling sweep")
  
  # Search space definition
  M = [1, 2, 3, 64, 128]
  C = [1, 2, 3, 64, 128]
  S = [1, 2, 3, 4]
  R = [1, 2, 3, 4, 5, 7]
  H = [17, 18, 19, 31, 33, 34, 224]
  
  # Fixed setup
  b = 1
  i = 0.2
  w = 0.1
  
  parser = argparse.ArgumentParser()
  parser.add_argument('--space_depth', help='Depth of each sweep dimension; use a small number like 1 or 2 to narrow the search space to simple tests; default 100', default=100)
  parser.add_argument('--num_tests', help='Supported: frontend, backend (default)', default=3)

  args = parser.parse_args()
  # How many and what test to run
  numTests = int(args.num_tests)
  random.seed(7)
  
  tests = []
  
  id = 0
  for m in M[:numTests-1]:
    for c in C[:numTests-1]:
      for s in S[:numTests-1]:
        for r in R[:numTests-1]:
          for h in H[:numTests-1]:
            id += 1
            conf = "b%d-h%d-r%d-s%d-c%d-m%d-" % (b, h, r, s, c, m) +  "wmin%g-wmax%g-imin%g-imax%g" % (-w, w, -i, i)
            tests.append(conf)

  print("INFO: identified %d available tests, running subset of %d" % (len(tests), numTests))
  for i in range(min(numTests, len(tests))):
    testId = random.randint(0, len(tests))
    conf = tests[testId]
    dir = "s%04d_%04d_%s" % (i, testId, conf)
    cmd = 'mkdir %s; cd %s && ' % (dir, dir)
    cmd += 'make -f $KAENA_PATH/compiler/tffe/test/Makefile trivnet_conv1 NN_CONFIG=%s OUT_PREFIX=trivnet_ NN_NAME=1conv > log-fe.txt 2>&1 &&' % (conf)
    cmd += 'bash $KAENA_PATH/compiler/python/state-buffer-estimate/test/RunOne.sh *tgz > log-be.txt 2>&1 && '
    cmd += 'echo -n PASS || echo -n FAIL; echo "  "' + dir
    print("\n", cmd)
    os.system(cmd)
    #exit(1)
