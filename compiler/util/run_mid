#!/usr/bin/env bash
set -e
x=0
pdb=""
nname="generic"
dbg="--debug 3"
opts=""
while [[ $# > 0 ]]; do case $1 in
    -d) pdb="-m pdb"; shift;;
    -r) nname="resnet50"; shift;;
    -x) opts="$opts --enable_replication"; shift;;
    -c) opts="$opts --enable_cleanup"; shift;;
    -s) opts="$opts --save_layer_output"; shift;;
    -p) opts="$opts --psum_512_chunk_4k"; shift;;
    -q) dbg="--debug 0"; shift;;
    -h) echo "run_mid: Run Middle-End on subgraph (be sure compiler.json exists)
        -d: Launch pdb
        -r: ResNet50 performance mode
        -x: Enable replication
        -c: Enable WaveGraph cleanup
        -s: Save all layers output
        -q: Quiet (debug level 0)
        -p: 512 PSUM entries and 4KB max chunk size (default is 256 PSUM entries and 2KB max chunk size)
        <num>: Stop and dump results after <num> fused-ops"; 
        exit 0;
        shift;;
    *) x=$1; shift;;
esac; done    

rm -f *-midout.npy
rm -f wavegraph.json wavegraph.json.org
cmd="python3 $pdb $KAENA_PATH/compiler/me/me_main.py --kgraph compiler.json --wavegraph wavegraph.json.org $dbg --nname=$nname $opts --stop_after_layer_num $x --no_inter_layer_load"
echo $cmd
echo $cmd > log-me.txt
$cmd | tee -a log-me.txt
$KAENA_PATH/compiler/cleaner/build/bin/cleaner --wavegraph wavegraph.json.org --fileout wavegraph.json
#python3 $pdb $KAENA_PATH/compiler/me/me_main.py --kgraph compiler.json --wavegraph wavegraph.json --debug 3 --nname=$nname $repl $cleanup --stop_after_layer_num $x --no_inter_layer_load 2>&1 | tee log-me.txt
