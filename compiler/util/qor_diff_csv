#!/usr/bin/env python3

# Copyright (C) 2018, Amazon.com. All Rights Reserved
#
# Compare properties in multiple qor files
#
# Example - 3-way comparison
#   $KAENA_PATH/compiler/util/qor_diff_csv --csv $KAENA_PATH/qor/20180621_qemu_c5/qor.csv 20180621_qemu_c5 $KAENA_PATH/qor/20180621_qemu_i3/qor.csv 20180621_qemu_i3 $KAENA_PATH/qor/20180621/qor.csv 20180621 --prop TotTimeSec

import csv, os, argparse, re
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt    

parser = argparse.ArgumentParser()
parser.add_argument('--csv', help='Qor csv files followed optionally by label text', nargs='+', default=[])
parser.add_argument('--prop', help='List of properties to compare', nargs='+', default=[])
parser.add_argument('--annotate', help='Annotate individual values on the plot', action='store_true', default=False)
parser.add_argument('--any_pass', help='Show tests that passed in ANY qor; default is to only show tests that passed in ALL', action='store_true', default=False)
args = parser.parse_args()


class QorDatabase(object):
  def __init__(self, csvFiles, anyPass):
    self.data = {} # textOrCsvName -> testName -> property -> value
    self.anyPass = anyPass
    self.labels = []  # for plotting in user order 
    file2label = {}
    for i in range(len(csvFiles)):
      csvFile = csvFiles[i]
      label = csvFile
      if csvFile.endswith(".csv"):
        if (i+1) < len(csvFiles):
          if not csvFiles[i+1].endswith(".csv"):
            label =csvFiles[i+1]
            i += 1
        file2label[csvFile] = label
        self.labels.append(label)
    for csvFile in file2label:
      self.add(file2label[csvFile], csvFile)
      
  def add(self, label, csvFile):
    self.data[label] = {}
    with open(csvFile) as fh:
      csvReader = csv.DictReader(fh, delimiter=',')
      for row in csvReader:
        #print('DEBUG row:  ', row)
        test = row['Test']
        if row['Status'] == 'PASS':
          self.data[label][test] = row
  def getLabels(self):
    return self.labels
  def getTests(self):
    tests = set()
    for label in self.getLabels():
      tests.update(self.data[label].keys())
    return tests
  def getTestAllPass(self):
    allTests = self.getTests()
    labels = self.getLabels()
    tests = []
    for test in allTests:
      passed = True
      for label in labels:
        status = self.getValue(label, test, 'Status')
        passed = passed and (status != None and status.startswith('PASS'))
      if passed:
        tests.append(test)
    return tests
  def getProps(self):
    props = set()
    for label in self.getLabels():
      for row in self.data[label].values():
        props.update(row.keys())
    return props
  def getValue(self, label, test, prop):
    val = None
    row = self.data[label].get(test, None)
    if row != None:
      val = row.get(prop, None)
    return val
  def getValueStr(self, label, test, prop):
    val = self.getValue(label, test, prop)
    if val == None:
      val = "None"
    return val

  def plotProps(self, outFile, prop, annotate):
    
    def label2style(labels):
      l2s = {}
      colors = ['red', 'blue', 'green', 'brown', 'orange', 'purple']
      colors += matplotlib.colors.CSS4_COLORS.keys()
      nextColor = 0
      for t in labels:
        ls = 'solid'
        c = colors[nextColor]
        nextColor += 1
        l2s[t] = [ls, c]
      return l2s
        
    sortedLabels = self.getLabels()
    baseLabel = sortedLabels[0]
    l2s = label2style(sortedLabels)
    tests = self.getTests() if self.anyPass else self.getTestAllPass()
    xlabels = sorted(tests, key=lambda testName: self.getValueStr(baseLabel, testName, prop))
    x = [x for x in range(len(xlabels))]
    #print("DEBUG x: ", x)
    #print("DEBUG x: ", xlabels)
    fig, axarr = plt.subplots(1, sharex=True, figsize=(12,8))
    axProp  = axarr
    axProp.set_xticks(x)
    axProp.set_xticklabels(xlabels, rotation=90)
    yLineHandles = []
    yMeanRef = None
    for label in sortedLabels:
      y = []
      for testName in xlabels:
        status = self.getValue(label, testName, 'Status')
        propVal = self.getValue(label, testName, prop)
        if not status == "PASS":
          propVal = None
        y.append(propVal)
      #print("DEBUG y: ", y)
      cleanX = []
      cleanY = []
      for i in range(len(x)):
        if y[i] != None:
          cleanX.append(x[i])
          cleanY.append(float(y[i]))
      ls, color = l2s[label]
      yLineHandles.append(axProp.plot(cleanX, cleanY, marker='o', ls=ls, c=color, label=label)[0])
      # Add mean
      yMean = np.array(cleanY).mean()
      if yMeanRef == None:
        vsRef = 1.0
        yMeanRef = yMean
      else:
        vsRef = yMean / yMeanRef
      yLineHandles.append(axProp.axhline(y=yMean, ls=ls, c=color, lw=1, label="Mean %.3f or %.2f x" % (yMean, vsRef)))
      # Annotate values
      if annotate:
        for xv, yv in zip(cleanX, cleanY):
          if yv != None:
            valLabel = "%.1f" % yv
            axProp.annotate(
                valLabel,
                xy=(xv, yv), xytext=(-20, 20),
                textcoords='offset points', ha='right', va='bottom',
                bbox=dict(boxstyle='round,pad=0.5', fc='lightyellow', alpha=0.5),
                arrowprops=dict(arrowstyle = '->', connectionstyle='arc3,rad=0'))
    axProp.legend(handles=yLineHandles)
    axProp.grid(True)
    axProp.set_xlabel('Test')
    axProp.set_ylabel(prop)
    axProp.set_title('Property comparison:  %s' % prop)
    #fig.autofmt_xdate()
    plt.tight_layout()
    plt.savefig(outFile)


qorDb = QorDatabase(args.csv, args.any_pass)
if len(args.prop) < 1:
  print("ERROR: use -prop with one or more of  %s" % "  ".join(qorDb.getProps()))
else:
  for prop in args.prop:
    outFile = "out_%s.svg" % prop
    qorDb.plotProps(outFile, prop, args.annotate)
