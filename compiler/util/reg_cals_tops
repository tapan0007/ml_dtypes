#!/usr/bin/python3

# Report Krena+Inkling regression run status

import os
import re
rootdir = "."
freq = 1e9

def simLogGetCycles(filepath):
  cycles = -1
  elapsedTimeSec = -1
  with open(filepath, 'rb') as fh:
    for lineBinary in fh.readlines():
      line = lineBinary.decode('ascii')
      found = re.search('Cycles:\s+(\d+)', line)
      if found:
        cycles = found.group(1)
      found = re.search('ElapsedTimeSec:\s+([\d.]+)', line)
      if found:
        elapsedTimeSec = found.group(1)
  return int(cycles), float(elapsedTimeSec)

def feLogGetOps(filepath):
  ops = 0
  with open(filepath, 'r') as fh:
    for line in fh:
      match = re.search('INFO: total opcount is (\d+)', line)
      if match:
        ops = int(match.groups(1)[0])
  return ops

print("%-26s  %16s  %16s %16s  %16s %16s" % ("Test", "Tops", "Ops", "Cycles", "TimeSec", "Cycles/sec"))
print("-" * 120)

for subdir, dirs, files in os.walk(rootdir):
  for file in files:
    #print(os.path.join(subdir, file))
    filepath = subdir + os.sep + file

    if filepath.endswith(".simres"):
      testName = filepath.split("/")[1]
      cycles, elapsedTimeSec = simLogGetCycles(filepath)

      feLog = testName + "/" + "log-fe.txt"
      if os.path.isfile(feLog):
        ops = feLogGetOps(feLog)
        tops = 0
        cyclesPerSec = 0
        if cycles > 0:
          tops = 1.0 * ops / cycles / 1e12 * freq
          if elapsedTimeSec > 0:
            cyclesPerSec = cycles / elapsedTimeSec
        print("%-26s  %16g  %16g %16g  %16.3f %16g" % (testName, tops, ops, cycles, elapsedTimeSec, cyclesPerSec))


