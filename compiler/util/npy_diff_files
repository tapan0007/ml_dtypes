#!/usr/bin/env python3

import numpy as np
import sys, os
import argparse
sys.path.insert(0, os.environ["KAENA_PATH"] + "/compiler/tffe")
from NpUtils import NpUtils as npu

parser = argparse.ArgumentParser()
parser.add_argument('--gold', help='Golden/reference file. Used as base for the computing relative diference',
                    default="gold.npy")
parser.add_argument('--new', help='New values', default="new.npy")
parser.add_argument('--csv', help='Write golden values and difference in matrix form (CSV)', action='store_true', default=False)
parser.add_argument('--verbose', help='Verbosity level, 0 exit code only (0 allclose match, 1 mismatch), 1 status line, 2 default with histograms and summaries,  3 individual values',
                    default=2)

args = parser.parse_args()

if not os.path.isfile(args.gold):
  raise("ERROR: missing file --gold ")
if not os.path.isfile(args.new):
  raise("ERROR: missing file --new ")

gold = np.load(args.gold)
new = np.load(args.new)

verbose = int(args.verbose)

if gold.shape != new.shape:
  print("ERROR: shapes differ, gold %s, new %s" %(gold.shape, new.shape))
  exit(2)

diffAbs = new.astype(np.float64) - gold.astype(np.float64)
# Avoid nan in relative difference reporting
goldFloat64NonZero = gold.astype(np.float64)
for i,v in np.ndenumerate(goldFloat64NonZero):
  if abs(goldFloat64NonZero[i]) < 1e-6:
    goldFloat64NonZero[i] = 1
diffRel = 100 * diffAbs.astype(np.float64) / goldFloat64NonZero

if verbose >= 1:
  print("Comparing")
  print("GOLD  %-10s %-8s %s" % (gold.shape, gold.dtype, args.gold))
  print("NEW   %-10s %-8s %s" % (new.shape, new.dtype, args.new))

if verbose >= 3:
  print("\nDetailed differences:")
  print("%-20s %-12s %-12s  %-12s %-12s" % ("Index", "Gold", "New", "Rel diff [%]", "Abs diff"))
  for index, g in np.ndenumerate(gold):
    n = new[index]
    da = diffAbs[index]
    dr = diffRel[index]
    print("%-20s %12g %12g  %12.2f%% %12g" % (str(index), g, n, dr, da))
  
if args.csv:
  shape = gold.shape
  for i in range(shape[1]):
    print("C=%d"%i)
    for j in range(shape[2]):
      for k in range(shape[3]):
        print("%12g,"%gold[0, i, j, k], end="")
      print(",", end="")
      for k in range(shape[3]):
        #print("%2.2f%%,"%diffRel[0, i, j, k], end="")
        print("%12g,"%diffAbs[0, i, j, k], end="")
      print("")

 # Histograms
if verbose >= 2:
  def printHistogram(text, arr):
    print(text)
    (counts, values) = np.histogram(arr)
    step = 60 / max(counts)
    for (count, value) in zip(counts, values):
      print("  %12g " % value, "#" * int(count * step + 0.49999), count)
  print("\nHistograms:")
  printHistogram("Gold", gold)
  printHistogram("New", new)

if verbose >= 2:
  print("\nStatistics")
  print("%-36s" % ("Relative Error % mean std  min max"))
  print("%12.2f %12.2f  %12.2f %12.2f" % (diffRel.mean(), diffRel.std(), diffRel.min(), diffRel.max()))

  print("%-36s" % ("Absolute Error  mean std  min max"))
  print("%12g %12g  %12g %12g" % (diffAbs.mean(), diffAbs.std(), diffAbs.min(), diffAbs.max()))

(tolr, tola) = (1, 1e-6)
resAllclose = npu.allclose(new, gold, tolr/100, tola, verbose=verbose)
if verbose >= 1:
  print("Allclose info tolerance rel %g %%  absolute %g : %s" % (tolr, tola, resAllclose))

exit(0 if resAllclose else 1)
