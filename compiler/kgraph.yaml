--- # Top structure is a dictionary with following fields:
data_type: Data type for the network (float16, bfloat16, uint8, uint16).
layers: A list of KNodes in the KGraph.
net_name: Name of the network.

--- # The following are fields common to all layers:
'#comment': Comment describing the KNode type, not to be interpreted downstream. Ex.
  Input placeholder
layer_name: Name of the KNode, which will be used in previous_layers list, or as a
  reference in Wavegraph. Ex. input
layer_type: Type of the KNode, see list of Knode types. Ex. Input
ofmap_format: The shape format of the output tensor. Ex. NCHW
ofmap_shape: The shape of the output tensor, specified as an array of dimensions.
  Ex. [1, 1, 32, 32]
out_data_type: Data type of output. Ex. float16
previous_layers: A list of names for KNodes that feed this KNode (predecessors). Ex.
  []
ref_file: The name of numpy file containing a operator's output tensor data. Ex. trivnet_input:0_NCHW.npy

--- # The layers with fields that are not in common list:
Add:
  '#comment': Element-wise operation on one input tensor and scalar.
  add_scalar: Scalar for the add operation. Ex. 0.0
AvgPool:
  '#comment': Two dimensional pool with explicit padding
  kernel_shape: The shape of the weights tensor, specified as an array of dimensions.
    Ex. [1, 1, 1, 1]
  padding: Padding for each dimension, an array of 2-elem arrays, each 2-elem array
    specify lower and upper padding. Ex. [[0, 0], [0, 0], [0, 0], [0, 0]]
  stride: Stride of convolution or pooling, specified as an array of strides for all
    dimensions. Ex. [1, 1, 2, 2]
BatchToSpaceND:
  '#comment': Interleave spatial data (reverse of SpaceToBatch) followed by cropping
  block_shape: Shape for spatial dimensions of the block in SpaceToBatch/BatchToSpace
    operation. It is specified as an array of size equal to number of spatial dimensions.
    Ex. [1, 1, 1, 2]
  crop: Number of spatial elements to remove from sides, specified as an array of
    2-elem arrays, each 2-elem array specify lower and upper cropping. Ex. [[0, 0],
    [0, 0], [0, 0], [0, 0]]
BiasAdd:
  '#comment': Element-wise operation on two input tensors
ClipByValue:
  '#comment': Clip values at min and max values
  clip_value_max: Limit maximum value to this value, which is of the same type as
    tensor. Ex. 3.0
  clip_value_min: Limit minimum value to this value, which is of the same type as
    tensor. Ex. 1.0
Concat:
  '#comment': Concatenate along channel dimension, using order in previous_layers
    list
Const:
  '#comment': Captured constant
Conv:
  '#comment': Two dimensional convolution with explicit padding
  kernel_file: Name of the numpy file that contains weights tensor values. Ex. trivnet_1conv__weight1__read:0_CRSM.npy
  kernel_format: The shape format of the weights tensor. Ex. CRSM
  kernel_shape: The shape of the weights tensor, specified as an array of dimensions.
    Ex. [1, 1, 1, 2]
  padding: Padding for each dimension, an array of 2-elem arrays, each 2-elem array
    specify lower and upper padding. Ex. [[0, 0], [0, 0], [0, 0], [0, 0]]
  stride: Stride of convolution or pooling, specified as an array of strides for all
    dimensions. Ex. [1, 1, 1, 1]
ConvTranspose:
  '#comment': Two dimensional transpose convolution (deconvolution) with explicit
    padding
  kernel_file: Name of the numpy file that contains weights tensor values. Ex. trivnet_iaf_1__trans_conv_1__kernel:0_MRSC.npy
  kernel_format: The shape format of the weights tensor. Ex. MRSC
  kernel_shape: The shape of the weights tensor, specified as an array of dimensions.
    Ex. [80, 1, 40, 256]
  padding: Padding for each dimension, an array of 2-elem arrays, each 2-elem array
    specify lower and upper padding. Ex. [[0, 0], [0, 0], [0, 0], [15, 15]]
  stride: Stride of convolution or pooling, specified as an array of strides for all
    dimensions. Ex. [1, 1, 1, 10]
Dequantize:
  '#comment': Dequantize uint8 or int32 into float32
  dequant_scale: Multiplier for dequantization operation. Ex. 6.151480194216473e-05
  zero_point: Quantized value that represents unquantized zero. Ex. 0
Exp:
  '#comment': Simple operation with single input tensor and single output tensor
ExpandDims:
  '#comment': Insert new dimension of size 1 in the axis specified by "axis" field.
  axis: The dimension that the operation applies to, specified as index into the shape/format
    array. Ex. 2
Input:
  '#comment': Input placeholder
MatMul:
  '#comment': Two dimensional matrix multiply with two dynamic operands
  kernel_file: Name of the numpy file that contains weights tensor values. Ex. trivnet_fc1000__kernel:0_CRSM.npy
  kernel_format: The shape format of the weights tensor. Ex. CRSM
  kernel_shape: The shape of the weights tensor, specified as an array of dimensions.
    Ex. [2048, 1, 1, 1000]
MaxPool:
  '#comment': Two dimensional pool with explicit padding
  kernel_shape: The shape of the weights tensor, specified as an array of dimensions.
    Ex. [1, 1, 3, 3]
  padding: Padding for each dimension, an array of 2-elem arrays, each 2-elem array
    specify lower and upper padding. Ex. [[0, 0], [0, 0], [0, 0], [0, 0]]
  stride: Stride of convolution or pooling, specified as an array of strides for all
    dimensions. Ex. [1, 1, 2, 2]
Maximum:
  '#comment': Element-wise multiply two input tensors
Minimum:
  '#comment': Element-wise multiply two input tensors
  mul_scalar: Scalar for the multiplication operation. Ex. 1097.0
Multiply:
  '#comment': Element-wise multiply two input tensors
Pad:
  '#comment': Pad FMAP using low/high values from 2 elem array per dimension
  padding: Padding for each dimension, an array of 2-elem arrays, each 2-elem array
    specify lower and upper padding. Ex. [[0, 0], [0, 0], [0, 1], [0, 1]]
QuantizeV2:
  '#comment': Quantize float32 into uint8
  quant_scale: Multiplier for quantization operation. Ex. 127.5
  zero_point: Quantized value that represents unquantized zero. Ex. 128
QuantizedConv:
  '#comment': Quantized two dimensional convolution with explicit padding, uint8 inputs,
    int32 outputs
  dequant_scale_filter: Multiplier for dequantization of quantized filter values.
    Ex. 0.00784313725490196
  dequant_scale_input: Multiplier for dequantization of quantized IFMAP values. Ex.
    0.00784313725490196
  kernel_file: Name of the numpy file that contains weights tensor values. Ex. trivnet_conv_ba_relu_pool_uint8__filter:0_CRSM.npy
  kernel_format: The shape format of the weights tensor. Ex. CRSM
  kernel_shape: The shape of the weights tensor, specified as an array of dimensions.
    Ex. [3, 3, 3, 4]
  max_output: Maximum dequantized value corresponding to the largest quantized output
    value. Ex. 132102.0313417916
  min_output: Minimum dequantized value corresponding to the smallest quantized output
    value. Ex. -132102.0313417916
  padding: Padding for each dimension, an array of 2-elem arrays, each 2-elem array
    specify lower and upper padding. Ex. [[0, 0], [0, 0], [1, 1], [1, 1]]
  stride: Stride of convolution or pooling, specified as an array of strides for all
    dimensions. Ex. [1, 1, 1, 1]
  zero_point_filter: Quantized value that represents unquantized zero for filter.
    Ex. 128
  zero_point_input: Quantized value that represents unquantized zero for IFMAP. Ex.
    128
Reciprocal:
  '#comment': Simple operation with single input tensor and single output tensor
Relu:
  '#comment': Simple operation with single input tensor and single output tensor
ResAdd:
  '#comment': Element-wise operation on two input tensors
Reshape:
  '#comment': Reshape implemented as a copy operation (output dims limited to between
    2-4)
Rsqrt:
  '#comment': Simple operation with single input tensor and single output tensor
Sigmoid:
  '#comment': Simple operation with single input tensor and single output tensor
Slice:
  '#comment': Extract slice along channel dimension
  slice_begin: Slice begin indices, specified as an array with one value for each
    dimension. Ex. [0, 0, 0, 0]
  slice_size: Slice size, specified as an array with one value for each dimension.
    Ex. [-1, -1, -1, 1536]
Softmax:
  '#comment': Softmax operation
Softplus:
  '#comment': Simple operation with single input tensor and single output tensor
SpaceToBatchND:
  '#comment': Zero pad spatial dimensions and deinterleave spatial data (deinterleave
    dimension is merged with batch dimension)
  block_shape: Shape for spatial dimensions of the block in SpaceToBatch/BatchToSpace
    operation. It is specified as an array of size equal to number of spatial dimensions.
    Ex. [1, 1, 1, 2]
  padding: Padding for each dimension, an array of 2-elem arrays, each 2-elem array
    specify lower and upper padding. Ex. [[0, 0], [0, 0], [0, 0], [2, 2]]
Split:
  '#comment': Split a tensor into subtensors.  see https://www.tensorflow.org/api_docs/python/tf/split
  axis: The dimension that the operation applies to, specified as index into the shape/format
    array. Ex. 3
  next_layer_order: A list of 2-elem arrays, each 2-elem array specifies the order
    of unstack followed by the KNode name. Ex. [[0, 'cell_9/comb_iter_1/right/Relu'],
    [0, 'cell_9/comb_iter_2/left/Relu'], [0, 'cell_9/comb_iter_2/right/Relu'], [0,
    'cell_9/cell_output/concat']]
  num_splits: Number of split outputs. Ex. 1
Sqrt:
  '#comment': Simple operation with single input tensor and single output tensor
Squeeze:
  '#comment': Simple operation with single input tensor and single output tensor
StridedSlice:
  '#comment': Extract slice along channel dimension
  begin_indices: Begin indices for strided-slice operation, specified as an array
    with one value for each dimension. Ex. [0, 0, 1, 1]
  begin_mask: Mask for begin indices, specified as a binary value with size equal
    to number of dimensions. Mask bit 1 means to ignore the corresponding begin index.
    Ex. [1, 1, 0, 0]
  channel_slice: The bounds for a slice in the channel dimension, specified as a 2-elem
    array. Ex. [0, 32]
  end_indices: End indices for strided-slice operation, specified as an array with
    one value for each dimension. Ex. [0, 0, 0, 0]
  end_mask: Mask for end indices, specified as a binary value with size equal to number
    of dimensions. Mask bit 1 means to ignore the corresponding end index. Ex. [1,
    1, 1, 1]
Sub:
  '#comment': Element-wise operation on two input tensors
Sum:
  '#comment': Reduce tensor along with given axes
  reduce_axes: Axes to reduce. Specified as an array with size matching number of
    dimensions. Ex. [0, 1, 0, 0]
Tanh:
  '#comment': Simple operation with single input tensor and single output tensor
Transpose:
  '#comment': Transpose implemented as a copy operation (output dims limited to between
    2-4)
  perm: A list specifying the mapping from old axis to new axis for each dimension.
    Ex. [1, 0]

