--- # Top structure is a dictionary with following fields:
data_type: Data type for the network (float16, bfloat16, uint8, uint16).
layers: A list of KNodes.
net_name: Name of the network.

--- # The following are fields common to all KNodes:
'#comment': Comment describing the KNode type, not to be interpreted downstream. Ex.
  Input placeholder
layer_name: Name of the KNode, which will be used in previous_layers. Ex. input
layer_type: Type of the KNode, see list of Knode types. Ex. Input
ofmap_format: The shape format of the output tensor. Ex. NCHW
ofmap_shape: The shape of the output tensor, specified as an array of dimensions.
  Ex. [1, 3, 4, 4]
previous_layers: A list of KNode names for KNodes that feed this KNode. Ex. []
ref_file: Name of the numpy file that contains output tensor values. Ex. trivnet_input:0_NCHW.npy

--- # The KNodes with fields that are not in common list:
AvgPool:
  '#comment': Two dimensional pool with explicit padding
  kernel_shape: The shape of the weights tensor, specified as an array of dimensions.
    Ex. [1, 1, 7, 7]
  padding: Padding for each dimension, an array of 2-elem arrays, each 2-elem array
    specify lower and upper padding. Ex. [[0, 0], [0, 0], [0, 0], [0, 0]]
  stride: Stride of convolution or pooling, specified as an array of strides for all
    dimensions. Ex. [1, 1, 7, 7]
BiasAdd:
  '#comment': Element-wise operation on two input tensors
Const:
  '#comment': Captured constant
Conv:
  '#comment': Two dimensional convolution with explicit padding
  kernel_file: Name of the numpy file that contains weights tensor values. Ex. trivnet_conv1__kernel:0_CRSM.npy
  kernel_format: The shape format of the weights tensor. Ex. CRSM
  kernel_shape: The shape of the weights tensor, specified as an array of dimensions.
    Ex. [3, 7, 7, 64]
  padding: Padding for each dimension, an array of 2-elem arrays, each 2-elem array
    specify lower and upper padding. Ex. [[0, 0], [0, 0], [2, 3], [2, 3]]
  stride: Stride of convolution or pooling, specified as an array of strides for all
    dimensions. Ex. [1, 1, 2, 2]
Input:
  '#comment': Input placeholder
MatMul:
  '#comment': Two dimensional matrix multiply
  kernel_file: Name of the numpy file that contains weights tensor values. Ex. trivnet_fc1000__kernel:0_CRSM.npy
  kernel_format: The shape format of the weights tensor. Ex. CRSM
  kernel_shape: The shape of the weights tensor, specified as an array of dimensions.
    Ex. [2048, 1, 1, 1000]
MaxPool:
  '#comment': Two dimensional pool with explicit padding
  kernel_shape: The shape of the weights tensor, specified as an array of dimensions.
    Ex. [1, 1, 3, 3]
  padding: Padding for each dimension, an array of 2-elem arrays, each 2-elem array
    specify lower and upper padding. Ex. [[0, 0], [0, 0], [0, 0], [0, 0]]
  stride: Stride of convolution or pooling, specified as an array of strides for all
    dimensions. Ex. [1, 1, 1, 1]
Multiply:
  '#comment': Element-wise multiply two input tensors
  mul_scalar: Scalar for the multiplication operation. Ex. 0.20000000298023224
Relu:
  '#comment': Simple operation with single input tensor and single output tensor
ResAdd:
  '#comment': Element-wise operation on two input tensors
Reshape:
  '#comment': Reshape implemented as a copy operation (output dims limited to between
    2-4)
Sigmoid:
  '#comment': Simple operation with single input tensor and single output tensor
Softmax:
  '#comment': Softmax operation
StridedSlice:
  '#comment': Extract slice along channel dimension
  channel_slice: The bounds for a slice in the channel dimension, specified as a 2-elem
    array. Ex. [0, 512]
Tanh:
  '#comment': Simple operation with single input tensor and single output tensor
Unstack:
  '#comment': Unstack along dimension specified by unstack_axis, using stacking order
    next_layer_order
  next_layer_order: A list of 2-elem arrays, each 2-elem array specifies the order
    of unstack followed by the KNode name. Ex. [[0, 'lstm_1_1/MatMul'], [1, 'lstm_1_1/MatMul_2'],
    [2, 'lstm_1_1/MatMul_4'], [3, 'lstm_1_1/MatMul_6']]
  unstack_axis: The axis of the unstack operation. Ex. 0

