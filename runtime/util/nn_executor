#!/usr/bin/env python3

# Copyright (C) 2018, Amazon.com. All Rights Reserved
#
# Kaena neural network executor with mapping to mixed backends.
#

import argparse
import os.path
import sys, json

kPath = os.environ.get('KAENA_PATH')

parser = argparse.ArgumentParser()
parser.add_argument('--nn_graph', help='Graph to execute', default="nn_graph.txt")
parser.add_argument('--tfpb', help='TensorFlow freeze graph file', default="f.pb")

args = parser.parse_args()
nnGraphFile = args.nn_graph
tfpbFile = args.tfpb

class NnSubgraph:
  def __init__(self, sgDir, inputs, outputs):
    self.sgDir = sgDir
    self.inputs = inputs
    self.outputs = outputs
  def run(self):
    cmd = "%s/runtime/util/runtime_tf" % kPath
    cmd += "  --tfpb %s" % ("../" + tfpbFile)
    cmd += "  --input_tensors %s" % " ".join(self.inputs) 
    cmd += "  --output_tensor %s" % " ".join(self.outputs) 
    os.chdir(self.sgDir)
    os.system(cmd)
    os.chdir("..")

class NnExec:
  def __init__(self, nnGraphFile, tpbFile):
    with open(nnGraphFile) as fh:
      self.nnGraphJsonData = json.load(fh)

  def run(self):
    for sgJson in self.nnGraphJsonData["SubGraphs"]:
      sg = NnSubgraph(sgJson["SubGraphDir"], sgJson["Inputs"],
                      sgJson["Output"])
      sg.run()
      
nnExec = NnExec(nnGraphFile, tfpbFile)
nnExec.run()


