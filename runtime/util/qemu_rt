#!/usr/bin/env python3

# Copyright (C) 2018, Amazon.com. All Rights Reserved


# Kaena qemu Inkling and emulator runtime wrapper

epilog = '''
The command is automatically invoked from RunAll through the nn_executor

The disk image is added to S3 by e.g,
  aws s3 cp /work1/zejdaj/git_repo/qemu_inkling/my_vm.img s3://kaena-vdi/lubuntu_20180525 --profile kaena
and in future we'll use the  kaena-compiler/runtime/util/vdi/vdi_manager.py to create and populate VDIs

There are 2 basic use modes:
 - Single port (--port) which starts qemu, boots its os, loads drivers, starts runtime and performs 1 inference
 - Pool (--pool) whih decouples starting qemu (boot os, add drivers) and the inference

The pool flow is https://issues.amazon.com/issues/kaena-574 . In Summary:

# Start a qemu pool (with 5 qemus, 0 to 4)
  $KAENA_PATH/runtime/util/qemu_rt --pool 7100 7105 --action start_pool > log_pool 2>&1 &
    # The pool ports can be 1 number (eg 5555, ie 1 qemu), 2 for range (8000 8010 means 10 qemus on ports 8000 to 8009), 3+ for a list of individual ports (e.g., 8003 8009 19765).

# Watch till pool completes initialization. It then prints env instructions:
  tail -f log_pool
   # prints 
      INFO: holding quemus <i>. Sleep 10. Use  export KAENA_QEMU_RT_POOL="7100 7105"; RunAll --force_qemu --test ... to run.   Terminate this process to close the qemus

# Use the above command to run regression tests. On small pools running slow tests also use --parallel <num ports ie 5> to make sure timeouts are properly applied
   ( export KAENA_QEMU_RT_POOL="7100 7105"; $KAENA_PATH/test/e2e/RunAll --force_qemu --parallel 5 --level 10 ) > log 2>1 &
     # Multiple runs or users can share the same pool - just remember that the time in the qemu_rt backend is part of the overall job timeout

# To terminate the pool (days later) simply kill the first process and remove pool_* directories where you started the pools

Zebu pool is similar:
  # Start
    $KAENA_PATH/runtime/util/qemu_rt --zebu "pool zebuserver2--6 zebuserver3--6" --action start_pool > log_pool 2>&1 &
  # Follow the instructions printed in the log_pool, which for teh above is
    ( setenv KAENA_ZEBU_SERVER "pool zebuserver2--6 zebuserver3--6"; $KAENA_PATH/test/e2e/RunAll --force_qemu --parallel 2 --test 0-1conv0_wave )
  # Notes
    - Starting the pool is sequential (ie, starting 2 takes 2x longer than 1)
    - Pools can mix and match - ie, you start a pool of 2, one crashes, then start new pool of 1 on
      the crashed host, but pass full list to RunAll as before
    - Just like qemu, the pools are multi-user, ie your pool can be used by you (

'''

import argparse
import os, sys, stat, time, random, datetime, re
import glob
import pexpect
import socket, errno

print("\nINFO: started as  ", " ".join(["'"+word+"'" if " " in word else word for word in sys.argv]), flush=True)
qiBldPath = os.environ["QEMU_BLD_DIR"]
if not os.path.isdir(qiBldPath):
  raise ValueError("ERROR: missing $KAENA_PATH/../qemu_inkling path  at %s" % qiBldPath)


qiPath = os.path.join(qiBldPath, "x86_64-softmmu", "qemu-system-x86_64")

# File paths / url and sha256sum
vdis = {
  "lubuntu1" : [
    "s3://kaena-vdi/lubuntu_20180525.img",
    "eefa63e6cfa626f3f6ad0622f046b906637b0c4146854f707660da9ab7a71d55" ],
  "debian1" : [
    "s3://kaena-vdi/debian-9.4.0.qcow",
    "bf477b909bcca20c42e0c5026c5fad050a7aa926b5d567608486f842c8ad9ae6" ],
  "debian1-4G" : [
    "s3://kaena-vdi/debian-9.4.0-4G.qcow",
    "4243469768faf66e46298a240816f46152eeaed375d350d94b33d6e3c88475ce" ],
  "ubuntu-18.04": [
    "s3://kaena-vdi/ubuntu-18.04-compressed.qcow2",
    "7ec65012ea281be9f364575b8b371ba407b371f87c446d6bafeebf06aa8ebb8a" ],
  "ubuntu-18.04-fixed_sshd": [
    "s3://kaena-vdi/ubuntu-18.04-fixed_sshd.qcow2",
    "53c8ecc732d7bc2304e7cb2c56b9df2af07967cfa7c790ed756c1c55da24352f" ],
  }

defaultVdi, checksumVdi = vdis["ubuntu-18.04-fixed_sshd"]

def portInUse(port):
  inUse = True
  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    try:
      s.bind(("localhost", port))
      inUse = False
    except socket.error as e:
      if e.errno == errno.EADDRINUSE:
        print("INFO portInUse: Port %d is already in use" % port, flush=True)
      else:
        print("INFO portInUse: ", e, flush=True)
  return inUse

def sha256checksum(fileName):
  # Use unix instead of hashlib to ensure 100% match with the os cmd line
  cmd = "sha256sum %s" % fileName
  checksum = ""
  with os.popen(cmd) as f:
    checksum = f.read().split(" ")[0]
  return checksum

parser = argparse.ArgumentParser(epilog=epilog,
           formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('--action', help='Default is inference, others are: start_pool', default="inference")
parser.add_argument('--vdi', help='Path to virtual disk image for the qemu VM. It can be file or S3 URL including options, the default is ' + defaultVdi, default=defaultVdi)
parser.add_argument('--port', help='SSH port for the qemu VM', type=int, default=5555)
parser.add_argument('--pool', help='Port range that defines Qemu process pool', type=int, nargs='+', default=[])
parser.add_argument('--mem', help='Memory for the qemu VM, default 512MB', type=int, default=512)
parser.add_argument('--kelf', help='Kelf directory to compile', default=None)
parser.add_argument('--sg', help='Subgraph label for identifying which SG executes', default=None)
parser.add_argument('--ifmaps', help='List of input images in sim ifmap format', nargs='+', default=None)
parser.add_argument('--zebu', help='Zebu host to use emulator model of Tonga instead of starting Qemu with SW Tonga locally', default=None)
args = parser.parse_args()

krtBldPath = os.environ["KRT_BLD_DIR"]
kelfVmDirGlobal = "/tmp/reg-1"
if args.zebu:
  krtBldPath = os.environ["KRT_EMU_BLD_DIR"]
  #kelfVmDirGlobal = "/media/sf_SharedFolder/reg-1"
if not os.path.isdir(krtBldPath):
  raise ValueError("ERROR: missing kaena runtime build")
print("INFO: using runtime build  %s" % krtBldPath)
krtVmPath = '/tmp/krt-1'


# Common class for backend platforms like Qemu or Zebu

class BePlat(object):
  def __init__(self):
    self.sshHost = None
    self.sshUser = None
    self.sshCommand = None
    self.tongaDevice = "0000:00:04.0"
    # Create on the fly to avoid issues with git chmod
    self.pemText = '''
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA2T87/SGMJkXPqDtZ2paK315Nh6aEZciDj4YiTwOJ70Ti0yiG
ej1iDrtnBy40TFWzvcwIkus3a/cTlOuflk2yE1kaVbnMMUMIGBV/K82nG9m4/c+G
0rdnz3PwAtCnuDkeGGP7ew6FVp8XQ4GSdCt8qgdHuhIKAiVgb0xNXwXo1++mgQBU
hPCHKhNHCRdw7Z3GgRTdtddUe3xPZNaBA0qk2HKe/LtqJGik490/yhNW+QIBnXye
XFoT32hPbTkU3GymmNCrSET+HxmwdeUqpspRrZnDZeJ7JV/H4cDpBkWjQFY5D1PX
g8G8ia+szTZyDauA5gZJM/Z7PD66vOm8lY0UzwIDAQABAoIBAFwkwvfxg7U0BQjQ
66KYGZz2LaIskZluO8bjWKf000tmB2MSnD86y919xQw5n7sE2rDU2ooeNCqZ6HdQ
nSauG6qzL0VPAfme+c7lR0Q3/PoGFb2piQDVA7Xs8c7v20N7DnW/6oleNlXwMnjS
e2DElSK05cpZHl+cpNNwJJz6L7FuTvvcltfn9DluDkqODTr/dfJ8JXXedudBCYP5
GL/74rnUsxhk7aozrIZy3Q4sCUyvgyjRU9mMLqIWmK2SPrrYsMGU5QTalVlHpSnG
GtkmVD+eGCPL07kN5ZuEQ7CAgfHq3ViUC3F+3qmR4vEmNs4Bt8rbKsqvvunNgjcm
iYx/kmECgYEA+CsDqsAJpQmX1pMSgniDcPUsMoVLF06eTyLUAYYY5LnWDnP8losi
7lL6+OcULorF1eXw+FqK4IhNpIk3MZC2uVCT2WkK/B8WAOQtB+OHb1kV8wkEQPbY
UUQfvkp9E/D3ByV6CRpuMhE6jrBUR37HXqEr7+HWSJ1koj3lD9nR6V8CgYEA4Bpn
lJd2pPZTv5Wh/DdWNNpT9hwcwi7r5oRQPTAtdiHNq8Z+6USMwjvBd7KI6UOrfSxP
VBatl8ve9FhYFlNQXeUeGaUZXfWd5Z3dQ2Y5VtnP13SHJT162Wmt4i6nPpVwwVvJ
6QgPggfM3xdNDbiF5x6T/Zgh5V/Tmky+xGkz2pECgYEAnZ/kkl2rQpIXSQjdJtWY
1vRCgEw9Z65dyvHaKqWbxhtrJH7zHkN9ilZWZiWPoggupC+KoJQRxY+NkUY+MlMy
W/4cCmk3uu+bsDE9kNcpvMWetWEyvHiM6QEWEG2LiFDy9i0NmB6bg12CDgNdZJPX
2fkQySpuSmz98DbT+P9m3o0CgYBwWcyEGktI+JWT/xhuse9uH+boA8AHOi7aKotv
oa+pAdlyvNjzaYKH/h1IPSGWkG5xGr3KknQFHhhwt7mxt6Ma77rfcH3/NRwr+bDs
EVu9xwUEJ095xBDK3shmFK2UGqekyLe5NGlR70cusSfYMSIwdIwNHzAfJqOXP9KD
9ZohgQKBgQCVgkGXKhncre6t8JYgjLplwAnuMWTatMQK+qtCaR29KSy6LeXW71Je
1J2fk91Z6+o0d31eTI5mOH9RBvJMGLpOkWw5769vDGNiIn3PiVK4ezdd2Zwz2T3U
c7unPf36AHohqWJgqn6L9z2PZRDplEs/82uzKzEvmFhMFWyyBZKtGg==
-----END RSA PRIVATE KEY-----
'''
    self.pemFile = "%s/.ssh/qemu_rt.pem" % os.getenv('HOME')
    if not os.path.isfile(self.pemFile):
      with open(self.pemFile, 'w') as fhPem:
        fhPem.write(self.pemText)
      os.chmod(self.pemFile, stat.S_IREAD)
    
    # Log all shell commands to a file
    self.cmdFh = open('replay-qemu_rt.txt', 'w')

  def __del__(self):
    self.cmdFh.close()
  def logReplay(self, cmd):
    self.cmdFh.write("# " + str(datetime.datetime.now()) + '\n')
    self.cmdFh.write(cmd + '\n\n')
    self.cmdFh.flush()
  def osSystem(self, cmd):
    self.logReplay(cmd)
    return os.system(cmd)

  def sshCmd(self, cmd, opt=""):
    fullCmd = "%s %s %s@%s '%s'" % (self.sshCommand, opt, self.sshUser, self.sshHost, cmd)
    print("INFO: sshCmd executing %s" % fullCmd, flush=True)
    return self.osSystem(fullCmd)
  def rsyncToVm(self, fromDir, toVmDir, opts=None):
    cmd = '%s %s %s@%s:%s' % (self.cmdForRsync, fromDir, self.sshUser, self.sshHost, toVmDir)
    if opts != None:
      cmd = cmd.replace("rsync ", "rsync %s " % opts)
    print("INFO: rsyncToVm executing %s" % cmd, flush=True)
    return self.osSystem(cmd) == 0
  def rsyncFromVm(self, fromVmDir, toDir):
    cmd = '%s %s@%s:%s %s' % (self.cmdForRsync, self.sshUser, self.sshHost, fromVmDir, toDir)
    print("INFO: rsyncFromVm executing %s" % cmd, flush=True)
    return self.osSystem(cmd) == 0
  def lock(self):
    return self.sshCmd('l=/var/lock/qemu; test -f $l || echo $$ > $l; expr $$ == `cat $l`') == 0
  def unlock(self):
    return self.sshCmd('l=/var/lock/qemu; /bin/rm -f $l') == 0
  def getTongaDevice(self):
    return self.tongaDevice

class Qemu(BePlat):
  def __init__(self, vdi, mem, port):
    BePlat.__init__(self)
    
    #qemuOpts = '-monitor stdio'
    qemuOpts = '-nographic'
    self.vdi = vdi
    self.localVdi = "copy.vdi"
    
    qemuNoInkling = os.getenv("QEMU_NO_INKLING", None)
    if qemuNoInkling == None:
      self.cmd = '%s %s -m %d -device pci-inkling %s -net nic,model=virtio,netdev=net0 -netdev user,id=net0,hostfwd=tcp::%d-:22 -serial file:log-qemu_serial.txt' % (qiPath, self.localVdi, mem, qemuOpts, port)
    else:
      self.cmd = '%s %s -m %d                     %s -net nic,model=virtio,netdev=net0 -netdev user,id=net0,hostfwd=tcp::%d-:22 -serial file:log-qemu_serial.txt' % ("/usr/bin/qemu-system-x86_64", self.localVdi, mem, qemuOpts, port)
    if os.path.exists("/dev/kvm"):
        self.cmd += "  --enable-kvm "
    self.port = port
    self.sshUser = "kaena"
    self.sshHost = "localhost"
    sshOpt = "-o StrictHostKeyChecking=no -o ConnectTimeout=600 -o UserKnownHostsFile=/dev/null"
    self.sshCommand = 'ssh -n %s -p %d -i %s ' % (sshOpt, self.port, self.pemFile)
    self.cmdForRsync = 'rsync -av --progress -e "ssh %s -p %s -i %s"' % (sshOpt, self.port, self.pemFile)

  def start(self, restartId):
    self.restartId = restartId
    if os.path.isfile(self.vdi):
      cmd = "/bin/cp %s %s" % (self.vdi, self.localVdi)
      print('INFO: copying vdi  "%s"' % cmd, flush=True)
      self.osSystem(cmd)
    elif self.vdi[0:5].upper() == 'S3://':
      cmd = "aws s3 cp --quiet %s %s %s" % (self.vdi, self.localVdi, "--profile kaena")
      print('INFO: copying vdi from S3 by  "%s"' % cmd, flush=True)
      self.osSystem(cmd)
      checksum = sha256checksum(self.localVdi)
      if checksum == checksumVdi:
        print("INFO: verified vdi checksum for %s" % self.localVdi, flush=True)
      else:
        raise ValueError("ERROR: vdi checksum incorrect for %s  expected %s  got %s" % (self.localVdi, checksumVdi, checksum))
    else:
      raise ValueError('ERROR: unknown vdi specification "%s"' % vdi)
    assert os.path.isfile(self.localVdi)
    cmd = 'sh -c "%s 2>&1 | tee log-qemu.txt"' % self.cmd
    print("INFO: starting Qemu  %s" % cmd, flush=True)
    self.logReplay(cmd)
    self.fh = pexpect.spawn(cmd, maxread=200000, searchwindowsize=200000)
    self.fh.expect("QEMU")
    self.fh.send("\r")
    time.sleep(30)  # ssh to the qemu guest is getting random errors, maybe this can help

  def testGuest(self, numAttempts):
    # Make sure the qemu quest is functional
    phaseId = self.restartId
    for attempId in range(numAttempts):
      print("\nINFO: testGuest  phase %d  attempt %d" % (phaseId, attempId), flush=True)
      testFile = "test_qemu_guest-%02d-%02d.txt" % (phaseId, attempId)
      testFileVm = "/tmp/" + testFile
      testFileReturned = testFile.replace(".txt", "-ret.txt")
      with open(testFile, 'w') as f:
        f.write("Test attempt %02d" % attempId)
      self.rsyncToVm(testFile, testFileVm)
      self.rsyncFromVm(testFileVm, testFileReturned)
      if os.path.isfile(testFileReturned):
        print("INFO: testGuest PASSED after attempt %d\n" % attempId, flush=True)
        return True
      print("INFO: testGuest diagnosing ssh connection %d" % attempId, flush=True)
      self.sshCmd("/bin/true", "-vvv")  # Baseline diagnostics
      time.sleep(30)  # on c5 the ssh returns immediately so allow wait beween attempts
    return False
  
  def stop(self):
    self.rsyncFromVm("/var/log/syslog", ".")
    checksum = sha256checksum(self.localVdi)
    
    # Remove vdi to reduce disk space (after printing its checksum for later forensics)
    print("INFO: Qemu.stop: removing vdi file %s %s" % (self.localVdi, checksum), flush=True)
    try:
      os.remove(self.localVdi)
    except OSError:
      pass
        
    # Clean up Qemu process
    try:
      self.fh.expect("Something non-existing to flush logs...", timeout=5)
    except:
      pass    
    print("INFO: stopping QEMU")
    try:
      self.fh.close()
    except:
      pass

    # Store previous attempt qemu logs
    cmd = "tar cvzf logs-qemu-restart-%02d.tgz log-qemu*.txt" % self.restartId
    print("INFO: Qemu.stop:  %s" % cmd)
    self.osSystem(cmd)
    
    # Various reports
    print("INFO: checking for zero-size files:", flush=True)
    self.osSystem("find -size 0")

  def checkDoubleEvents(self):  # Return: True is good, False is bad
    cmd = "egrep 'Double .+ of event' log-qemu.txt"
    print("INFO: performing double event check using  %s" % cmd)
    ok = os.WEXITSTATUS(self.osSystem(cmd)) == 1
    print("INFO: double event check %s" % "PASS" if ok else "FAIL")
    return ok
    

class Zebu(BePlat):
  def __init__(self, zebuHost):
    BePlat.__init__(self)
    match = re.search(r'(\S+)--(\d+)', zebuHost)
    if match:
      self.zebuHost  = match.groups()[0]
      self.rtlSandbox = int(match.groups()[1])
    else:
      raise ValueError("ERROR: unparsable zebu host spec %s" % zebuHost)
    self.sshHost = self.zebuHost.replace("server", "Guest")
    self.sshUser = "synopsys"
    self.tongaDevice = "0000:01:00.0"  # later get from lspci
    sshOpt = "-o StrictHostKeyChecking=no -o ConnectTimeout=600 -o UserKnownHostsFile=/dev/null"
    self.sshCommand = 'ssh -n %s -i %s ' % (sshOpt, self.pemFile)
    self.cmdForRsync = 'rsync -av --progress -e "ssh %s -i %s"' % (sshOpt, self.pemFile)
    #self.cmdForRsync = 'rsync --rsync-path "sudo rsync" -av --progress -e "ssh %s -i %s"' % (sshOpt, self.pemFile)

  def startTonga(self):
    # Boot Tonga
    tongaOk = False
    cmd = 'sh -c "%s 2>&1 | tee log-zebu_tonga.txt"' % ("ssh %s" % self.zebuHost)
    print("INFO: starting Zebu Tonga  %s" % cmd, flush=True)
    self.logReplay(cmd)
    self.fh = pexpect.spawn(cmd, maxread=200000, searchwindowsize=200000)
    self.fh.expect("zebuadmin@zebu-server")

    self.fh.send("source ~/.vbox_bashrc\r")
    self.fh.expect("$")
    
    self.fh.send("ptbkill -all; sleep 5\r")
    self.fh.expect("$")

    self.fh.send("cdpt%d\r" % self.rtlSandbox)
    self.fh.expect("$")

    self.fh.send("rune -ptcr -notbrst\r")
    self.fh.expect("ZeBu")
    self.fh.expect("Design loaded successfully")
    try:
      idx = self.fh.expect(["Init DRAM", " bind: Address already in use", "Test bench aborted"], timeout=120)
      if idx == 0:
        print("INFO: Tonga DRAM init ok")
        try:
          idx = self.fh.expect(["All ProxyXtors are ready to connect to the VM",
                               "is already running for the same design"],
                               timeout=120)
          if idx == 0:
            print("INFO: started new Tonga")
          elif idx == 1:
            print("INFO: recycled a Tonga")
          tongaOk = True
        except pexpect.exceptions.TIMEOUT:
          print("ERROR: Try %d Zebu Tonga VM boot timeout out, see log-zebu_tonga.txt" % self.restartId)
      elif idx == 1:
        print("ERROR: Tonga failed due to port address in use, see log-zebu_tonga.txt and use ")
        fixCmd = "netstat -plat | grep 32004 && ps -ef | grep defunct | awk '{print \$2}' | xargs -l1 kill -9"
        sshCmd = 'ssh %s "%s"' % (self.zebuHost, fixCmd)
        print("INFO: attempting to fix the host for next run by command   %s" % sshCmd, flush=True)
        os.system(sshCmd)
      elif idx == 2:
        print("ERROR: Tonga testbench aborted, see log-zebu_tonga.txt")
        
    except pexpect.exceptions.TIMEOUT:
      print("ERROR: Try %d Tonga DRAM init timed out, see log-zebu_tonga.txt" % self.restartId)
    
    if tongaOk:
      print("INFO: Zebu Tonga started", flush=True)
    else:
      print("ERROR: Zebu Tonga failed to start", flush=True)
      
    return tongaOk

  def startVm(self):
    # Boot the VM:
    vmOk = False
    cmd = 'sh -c "%s 2>&1 | tee log-zebu_vm.txt"' % ("ssh %s" % self.zebuHost)
    print("INFO: starting Zebu VM  %s" % cmd, flush=True)
    self.fh1 = pexpect.spawn(cmd, maxread=200000, searchwindowsize=200000)
    self.fh1.expect("zebuadmin@zebu-server")

    self.fh1.send("source ~/.vbox_bashrc\r")
    self.fh1.expect("$")

    self.fh1.send("cdpt%d\r" % self.rtlSandbox)
    self.fh1.expect("$")

    self.fh1.send("rune -vbrun\r")
    self.fh1.expect("VBoxManage startvm")
    try:
      idx = self.fh1.expect(["has been successfully started",
                           "add any error case here"],
                           timeout=120)
      if idx == 0:
        print("INFO: started Zebu VM")
        vmOk = True
      elif idx == 1:
        print("INFO: add error condition description here")
    except TIMEOUT:
      print("ERROR: Try %d Zebu Tonga VM boot timeout out, please review log-zebu_tonga.txt" % self.restartId)
    
    if vmOk:
      print("INFO: Zebu Vm started OK", flush=True)
    else:
      print("ERROR: Zebu Vm failed to start", flush=True)
    return vmOk
  

  def initGuestOs(self):
    guestOk = False
    self.fh1.send("\r")
    self.fh1.send("rune -vbssh\r")
    try:
      self.fh1.expect("synopsys@localhost's password:", timeout=60)
    except:
      # Debug diagnostics, should not exist is normal use
      print("WARNING: failed to receive guestOS password prompt. Debug manually, sleep 61, kill the sleep process to resume", flush=True)
      self.osSystem("sleep 61")
    self.fh1.send("iltwas\r")
    self.fh1.expect("Last login:")

    self.fh1.send("sudo su\r")
    self.fh1.expect("root@synopsys-VirtualBox:")

    self.fh1.send("mount -t vboxsf SharedFolder /media/sf_SharedFolder/\r")
    self.fh1.expect("root@synopsys-VirtualBox")
    
    # To unify with qemu flow
    self.fh1.send("mkdir -p %s; chown synopsys %s\r" % (krtVmPath, krtVmPath))
    self.fh1.expect("")
    #  does NOT work on the Shared folder, replaed by sudo
    #self.fh1.send("mkdir -p %s; chown synopsys %s\r" % (kelfVmDirGlobal, kelfVmDirGlobal))
    #self.fh1.expect("")

    self.fh1.send("lspci -v\r")
    try:
      idx = self.fh1.expect(["System peripheral: Device 1d0f:7064",
                           "add any error case here"],
                           timeout=60)
      if idx == 0:
        print("INFO: started Zebu guest OS is up and lspi shows tonga", flush=True)
        guestOk = True
    except TIMEOUT:
      print("INFO: Zebu guest OS lspi does NOT have any tonga", flush=True)
    return guestOk

  def start(self, restartId):
    self.restartId = restartId
    if self.startTonga():
      if self.startVm():
        return self.initGuestOs()
    return False
    
    
  def stop(self):
    # Debug window for manual post-mortem
    #print("WARNING: Zebu.stop() sleep 900, kill the sleep process to resume", flush=True)
    #self.osSystem("sleep 900")

    # Clean up Zebu process
    try:
      # FIX_THIS: check with Ravi if there is a "nice quit" capability
      self.fh.send("quit\r")
      self.fh.expect("zebu really quit\r", timeout=5)
    except:
      pass    
    print("INFO: stopping ZEBU TONGA", flush=True)
    try:
      self.fh.close()
    except:
      pass
    
    # Clean up VM
    try:
      # FIX_THIS: check with Ravi if there is a "nice quit" capability
      self.fh1.send("exit\r")
      self.fh1.expect("vm really quit\r", timeout=5)
    except:
      pass    
    print("INFO: stopping ZEBU VM", flush=True)
    try:
      self.fh1.close()
    except:
      pass
    

class Krt:
  def __init__(self, qemu, timeout):
    self.qemu = qemu
    self.cwd = os.getcwd()
    self.inklingTimeout = timeout
    self.kelfVmDir = kelfVmDirGlobal  # non-sg spefic, for --action cleanup_pool
    self.sg = "sg00"
    # env needed for the installed krt
    p = krtVmPath
    epath = os.getenv('PATH')
    eldlp = os.getenv('LD_LIBRARY_PATH')
    self.envStr = '  PATH=%s:%s:%s' % (p, p + '/bin', epath)
    self.envStr += '  LD_LIBRARY_PATH=%s:%s:%s ' % ( p, p + "/lib", eldlp)

  def install(self):
    runtimSrcPath = os.environ["KAENA_RT_PATH"]
    if not os.path.isdir(runtimSrcPath):
      raise ValueError("ERROR: missing runtime src at %s" % runtimSrcPath)
    krtPkgPattern = 'krt-*.*-*-core.tar.gz'
    krtPackages = glob.glob(os.path.join(krtBldPath, krtPkgPattern))
    if len(krtPackages) != 1:
      raise ValueError("ERROR: Found {} runtime packages at {}".format(len(krtPackages), krtBldPath))
    self.qemu.sshCmd("/bin/rm -rf %s/*" % krtVmPath )
    self.qemu.rsyncToVm(krtPackages[0], krtVmPath + "/")
    #self.qemu.rsyncToVm(os.path.join(runtimSrcPath, "kbinlib", "vfio_bind.py"), krtVmPath + "/")
    self.qemu.sshCmd("sudo sysctl -w vm.nr_hugepages=128")
    self.qemu.sshCmd("cd %s &&  sudo tar xvfz %s" % (krtVmPath, krtPkgPattern))
    #self.qemu.sshCmd("cd %s &&  sudo modprobe vfio enable_unsafe_noiommu_mode=Y" % krtVmPath)
    self.qemu.sshCmd("sudo python3 %s/vfio_bind.py" % (krtVmPath + '/bin'))
   
  def addModel(self, kelfDir, kelfVmDir, sg):
    self.kelfVmDir = kelfVmDir
    self.sg = sg
    self.qemu.sshCmd("mkdir -p %s" % kelfVmDir)
    self.qemu.rsyncToVm(kelfDir + "/", kelfVmDir, "--copy-links")
    p = krtVmPath
    cmdCompile = 'cd %s; %s %s/bin/kelf2kbin def.json' % (kelfVmDir, self.envStr, p)
    self.qemu.sshCmd(cmdCompile)
  def start(self):
    self.ifmapDir = "%s/ifmap" % self.kelfVmDir
    self.ofmapDir = "%s/ofmap" % self.kelfVmDir
    self.qemu.sshCmd("mkdir %s %s" % (self.ifmapDir, self.ofmapDir))
    tongaDev = self.qemu.getTongaDevice()
    kbin_rt = '%s/bin/kbin_rt' % krtVmPath
    cmdKrt = '%s %s %s %s %s -n 1 -s -t %d' % (
               kbin_rt, self.kelfVmDir, self.ifmapDir, self.ofmapDir, tongaDev, self.inklingTimeout)
    cmdRuntime = 'sudo /bin/sh -c "(cd %s && %s ldd %s && %s %s && touch krt.pass ) > %s/log-krt.txt 2>&1 & "' %  (
                   self.kelfVmDir, self.envStr, kbin_rt, self.envStr, cmdKrt, self.kelfVmDir) 
    self.qemu.sshCmd(cmdRuntime)
    time.sleep(1)
  def stop(self):
    self.qemu.rsyncFromVm(self.kelfVmDir + "/log-krt.txt", ".")
    time.sleep(2)  # for kbin_rt to have time to return exit code after writing out.bin
    self.qemu.rsyncFromVm(self.kelfVmDir + "/krt.pass", ".")
    debug = True
    if debug:
      self.qemu.rsyncFromVm(self.kelfVmDir + "/", "debug_kelf_%s" % self.sg)
    self.qemu.sshCmd("/bin/rm -rf %s" % self.kelfVmDir)
    krtOk = os.path.isfile("krt.pass")
    if not krtOk:
      print("ERROR: kbin_rt did not return zero exit code, check log-krt.txt")
      #print("INFO: FIX_THIS kbin_rt failed but temporrarily oveeriding till 0-1conv0_qemu_wave is fixed")
      #return True
    return krtOk
  def inference(self, ifmap, ofmap):
    ifmapPath = os.path.realpath(ifmap)
    if self.qemu.rsyncToVm(ifmapPath, self.ifmapDir, "--copy-links"):
      self.qemu.sshCmd('pidofp=$(pidof kbin_rt); count=0; until [ -f %s/out.bin -o $count -gt %d ] || [ -z $pidofp ]; do sleep 1 ; pidofp=$(pidof kbin_rt); let count++; echo $count; done' % (self.ofmapDir, self.inklingTimeout))

      if self.qemu.rsyncFromVm(self.ofmapDir + "/out.bin", ofmap):
        print("INFO: the qemu, guest os and krt sucessfully created the output fmap binary")
      else:
        print("ERROR: failed to transfer ofmap from the qemu guest os")
    else:
      print("ERROR: failed to transfer ifmap %s to the qemu guest os" % ifmapPath)


class QemuPool:
  def __init__(self, ports, vdi, mem, inklingTimeout):
    if len(ports) == 2:
      self.ports = range(ports[0], ports[1])
    else:
      self.ports = ports
    self.qemus = []
    for port in self.ports:
      qemu = Qemu(vdi, mem, port)
      krt = Krt(qemu, inklingTimeout)
      self.qemus.append((qemu, krt))
  def checkPorts(self):
    for port in self.ports:
      if portInUse(port):
        return False
    return True
  def startPool(self):
    if self.checkPorts():
      for idx in range(len(self.ports)):
        port = self.ports[idx]
        qemu, krt = self.qemus[idx]
        d = "pool_%d" % port
        os.mkdir(d)
        os.chdir(d)
        for qemuRestartId in range(3):
          qemu.start(qemuRestartId)
          if qemu.testGuest(4):
            krt.install()
            break
          else:
            qemu.stop()
        os.chdir("..")
    else:
      raise ValueError("ERROR: cannot start qemu pool - the ports are in use")
    return len(self.qemus) == len(self.ports)
  def getAvailQemu(self):
    found = False
    while not found:
      idx = random.randint(0, len(self.qemus)-1)
      print("INFO: trying to lock QEMU %d on port %d ..." % (idx, self.ports[idx]), flush=True)
      qemu, krt = self.qemus[idx]
      found = qemu.lock()
      time.sleep(1)
    print("INFO: locked QEMU %d on port %d" % (idx, self.ports[idx]), flush=True)
    return qemu, krt
  def cleanup(self):
    for idx in range(len(self.ports)):
      port = self.ports[idx]
      qemu, krt = self.qemus[idx]
      krt.stop()
      qemu.unlock()

class ZebuPool:
  def __init__(self, zebuHosts, inklingTimeout):
    self.zebuHosts = zebuHosts
    self.zebus = []
    for host in self.zebuHosts:
      zebu = Zebu(host)
      krt = Krt(zebu, inklingTimeout)
      self.zebus.append((host, zebu, krt))
  def startPool(self):
    for host, zebu, krt in self.zebus:
      d = "pool_%s" % host
      os.mkdir(d)
      os.chdir(d)
      for qemuRestartId in range(2):
        if zebu.start(qemuRestartId):
          krt.install()
          break
        else:
          zebu.stop()
      os.chdir("..")
    return len(self.zebus) == len(self.zebuHosts)
  def getAvailZebu(self):
    found = False
    while not found:
      idx = random.randint(0, len(self.zebus)-1)
      host, zebu, krt = self.zebus[idx]
      print("INFO: trying to lock Zebu on host %s ..." % (host), flush=True)
      found = zebu.lock()
      time.sleep(1)
    print("INFO: locked ZEBU on host %s" % (host), flush=True)
    return zebu, krt
  def cleanup(self):
    for idx in range(len(self.zebus)):
      host, zebu, krt = self.zebus[idx]
      krt.stop()
      zebu.unlock()

#########################################################

inklingTimeout = 6000


##############  zebu pool  ##############
if args.zebu != None and args.zebu.startswith('pool'):
  zebuPoolStr = args.zebu.replace('pool', '')
  qp = ZebuPool(zebuPoolStr.split(), inklingTimeout)
  if args.action == 'start_pool':
    if not qp.startPool():
      raise RuntimeError('ERROR: failed to start zebus, %d requested while %d started' % (len(qp.zebuHosts), len(qp.zebus)))
    print('INFO: your zebu pool has started. You can access it on hosts %s. To stop them terminate this process' % qp.zebuHosts, flush=True)
    i = 0
    while True:
      time.sleep(10)
      print('\nINFO: holding zebus iteration %d. Sleep 10. Use  export KAENA_ZEBU_SERVER="%s"; RunAll --force_qemu --parallel %d --test ... to run.   Terminate this process to close the zebus' % (
             i, " ".join(str(p) for p in qp.zebuHosts), len(qp.zebus)), flush=True)
      i += 1
      # Zebu heartbeet
      for  host, zebu, krt in qp.zebus:
        zebu.sshCmd('echo -n "  Zebu pool heartbeat on %s ";  TZ=America/Los_Angeles uptime' % host)
  elif args.action == 'cleanup_pool':
    qp.cleanup()
  elif args.action == 'inference':
    if args.kelf == None:
      raise ValueError("ERROR: use --kelf")
    zebu, krt = qp.getAvailZebu()
    krt.addModel(args.kelf, "%s/%s" % (kelfVmDirGlobal, args.sg), args.sg)
    krt.start()
    assert len(args.ifmaps) == 1
    for ifmap in args.ifmaps:
      krt.inference(ifmap, "out-%s.bin" % args.sg)
    krtOk = krt.stop()
    zebu.unlock()
    sys.exit(0 if krtOk else 1)
  raise RuntimeError("ERROR: zebu pool is not yet supported")

##############  zebu  ##############
elif args.zebu != None:
  zebuOk = False
  krtOk = False
  for zebuRestartId in range(2):
    zebu = Zebu(args.zebu)
    if zebu.start(zebuRestartId):
      zebuOk = True
      krt = Krt(zebu, inklingTimeout)
      krt.install()
      krt.addModel(args.kelf, "%s/%s" % (kelfVmDirGlobal, args.sg), args.sg)
      krt.start()
      for ifmap in args.ifmaps:
        krt.inference(ifmap, "out-%s.bin" % args.sg)
      krtOk = krt.stop()
    else:
      print("ERROR: Failed to start Zebu  phase %d, restarting ..." % zebuRestartId)
    zebu.stop()
    if zebuOk:
      break
  if zebuOk:
    sys.exit(0 if krtOk else 1)
  raise ValueError("ERROR: Failed to start ZEBU")

##############  qemu pool  ##############
elif len(args.pool) > 0:
  qp = QemuPool(args.pool, args.vdi, args.mem, inklingTimeout)
  if args.action == 'start_pool':
    if not qp.startPool():
      raise RuntimeError('ERROR: failed to start qemus, %d requested while %d started' % (len(qp.ports), len(qp.qemus)))
    print('INFO: your qemu pool has started. You can access it on ports %s. To stop them terminate this process' % qp.ports, flush=True)
    i = 0
    while True:
      time.sleep(10)
      print('INFO: holding quemus %d. Sleep 10. Use  export KAENA_QEMU_RT_POOL="%s"; RunAll --force_qemu --test ... to run.   Terminate this process to close the qemus' % (i, " ".join(str(p) for p in qp.ports)), flush=True)
      i += 1
  elif args.action == 'cleanup_pool':
    qp.cleanup()
  elif args.action == 'inference':
    if args.kelf == None:
      raise ValueError("ERROR: use --kelf")
    qemu, krt = qp.getAvailQemu()
    krt.addModel(args.kelf, "%s/%s" % (kelfVmDirGlobal, args.sg), args.sg)
    krt.start()
    assert len(args.ifmaps) == 1
    for ifmap in args.ifmaps:
      krt.inference(ifmap, "out-%s.bin" % args.sg)
    krtOk = krt.stop()
    qemu.unlock()
    sys.exit(0 if krtOk else 1)
    
##############  single qemu  ##############
else:
  # port mode
  if args.kelf == None:
    raise ValueError("ERROR: use --kelf")
  qemuOk = False
  krtOk = False
  port = args.port
  for qemuRestartId in range(3):
    while portInUse(port):
      port += 3
    print("INFO: using available port %d  (--port was %d)" % (port, args.port))
    qemu = Qemu(args.vdi, args.mem, args.port)
    qemu.start(qemuRestartId)
    if qemu.testGuest(4):
      qemuOk = True
      krt = Krt(qemu, inklingTimeout)
      krt.install()
      krt.addModel(args.kelf, "%s/%s" % (kelfVmDirGlobal, args.sg), args.sg)
      krt.start()
      for ifmap in args.ifmaps:
        krt.inference(ifmap, "out-%s.bin" % args.sg)
      krtOk = krt.stop()
    else:
      print("ERROR: Failed to start Qemu  phase %d, restarting ..." % qemuRestartId)
    qemu.stop()
    if not qemu.checkDoubleEvents():
      raise ValueError("ERROR: double event check failed")
    if qemuOk:
      break
    else:
      time.sleep(30)  # qemu was still failing upon several restarts. Delay after stop() may help.
  if qemuOk:
    sys.exit(0 if krtOk else 1)
  raise ValueError("ERROR: Failed to start QEMU")
