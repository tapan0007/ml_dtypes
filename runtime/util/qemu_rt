#!/usr/bin/env python3

# Copyright (C) 2018, Amazon.com. All Rights Reserved


# Kaena qemu Inkling runtime wrapper
# Sample command
#   # Unpack kelf to ./kelf
#   \rm -rf qemu-log.txt copy.vdi
#   /work1/zejdaj/git_repo/kaena-compiler/runtime/util/qemu_rt --kelf kelf --ifmaps kelf/trivnet_input:0_NCHW.npy
#  Test regressions by e.g.
#    RunAll --force_qemu --parallel 16 --test_re wave --select not_waived >& log
#  The disk image is added to S3 by e.g,
#    aws s3 cp /work1/zejdaj/git_repo/qemu_inkling/my_vm.img s3://kaena-vdi/lubuntu_20180525 --profile kaena
#  and in future we'll use the  kaena-compiler/runtime/util/vdi/vdi_manager.py to create and populate VDIs

import argparse
import os, sys, stat, time
import glob
import pexpect
import socket, errno

print("\nINFO: started as  ", " ".join(["'"+word+"'" if " " in word else word for word in sys.argv]), flush=True)
qiBldPath = os.environ["QEMU_BLD_DIR"]
if not os.path.isdir(qiBldPath):
  raise ValueError("ERROR: missing $KAENA_PATH/../qemu_inkling path  at %s" % qiBldPath)

krtBldPath = os.environ["KRT_BLD_DIR"]
if not os.path.isdir(krtBldPath):
  raise ValueError("ERROR: missing kaena runtime build")

qiPath = os.path.join(qiBldPath, "x86_64-softmmu", "qemu-system-x86_64")

gitVmPath = '/home/ubuntu/git'
krtVmPath = '/home/ubuntu/git/kaena-runtime'

defaultVdi = "s3://kaena-vdi/lubuntu_20180525.img"
checksumVdi = "eefa63e6cfa626f3f6ad0622f046b906637b0c4146854f707660da9ab7a71d55" # sha256sum

def portInUse(port):
  inUse = True
  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    try:
      s.bind(("localhost", port))
      inUse = False
    except socket.error as e:
      if e.errno == errno.EADDRINUSE:
        print("INFO portInUse: Port %d is already in use" % port, flush=True)
      else:
        print("INFO portInUse: ", e, flush=True)
  return inUse



parser = argparse.ArgumentParser()
parser.add_argument('--action', help='Default is inference, others are vdi, build', default="inference")
parser.add_argument('--vdi', help='Path to virtual disk image for the qemu VM. It can be file or S3 URL including options, the default is ' + defaultVdi, default=defaultVdi)
parser.add_argument('--port', help='SSH port for the qemu VM', type=int, default=5555)
parser.add_argument('--mem', help='Memory for the qemu VM, default 1024MB', type=int, default=1024)
parser.add_argument('--kelf', help='Kelf directory to compile', default=None)
parser.add_argument('--ifmaps', help='List of input images in sim ifmap format', nargs='+', default=None)
args = parser.parse_args()
if args.kelf == None:
  raise ValueError("ERROR: use --kelf")

class Qemu:
  def __init__(self, vdi, mem, port):
    #qemuOpts = '-monitor stdio'
    qemuOpts = '-nographic'
    localVdi = "copy.vdi"
    if os.path.isfile(vdi):
      cmd = "/bin/cp %s %s" % (vdi, localVdi)
      print('INFO: copying vdi  "%s"' % cmd, flush=True)
      os.system(cmd)
    elif vdi[0:5].upper() == 'S3://':
      cmd = "aws s3 cp --quiet %s %s %s" % (vdi, localVdi, "--profile kaena")
      print('INFO: copying vdi from S3 by  "%s"' % cmd, flush=True)
      os.system(cmd)
      cmd = "sha256sum %s" % localVdi
      checksum = ""
      with os.popen(cmd) as f:
        checksum = f.read().split(" ")[0]
      if checksum == checksumVdi:
        print("INFO: verified vdi checksum for %s" % localVdi, flush=True)
      else:
        raise ValueError("ERROR: vdi checksum incorrect for %s  expected %s  got %s" % (localVdi, checksumVdi, checksum))
    else:
      raise ValueError('ERROR: unknown vdi specification "%s"' % vdi)
    assert os.path.isfile(localVdi)
    
    # Create on the fly to avoid issues with git chmod
    self.pemText = '''
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA2T87/SGMJkXPqDtZ2paK315Nh6aEZciDj4YiTwOJ70Ti0yiG
ej1iDrtnBy40TFWzvcwIkus3a/cTlOuflk2yE1kaVbnMMUMIGBV/K82nG9m4/c+G
0rdnz3PwAtCnuDkeGGP7ew6FVp8XQ4GSdCt8qgdHuhIKAiVgb0xNXwXo1++mgQBU
hPCHKhNHCRdw7Z3GgRTdtddUe3xPZNaBA0qk2HKe/LtqJGik490/yhNW+QIBnXye
XFoT32hPbTkU3GymmNCrSET+HxmwdeUqpspRrZnDZeJ7JV/H4cDpBkWjQFY5D1PX
g8G8ia+szTZyDauA5gZJM/Z7PD66vOm8lY0UzwIDAQABAoIBAFwkwvfxg7U0BQjQ
66KYGZz2LaIskZluO8bjWKf000tmB2MSnD86y919xQw5n7sE2rDU2ooeNCqZ6HdQ
nSauG6qzL0VPAfme+c7lR0Q3/PoGFb2piQDVA7Xs8c7v20N7DnW/6oleNlXwMnjS
e2DElSK05cpZHl+cpNNwJJz6L7FuTvvcltfn9DluDkqODTr/dfJ8JXXedudBCYP5
GL/74rnUsxhk7aozrIZy3Q4sCUyvgyjRU9mMLqIWmK2SPrrYsMGU5QTalVlHpSnG
GtkmVD+eGCPL07kN5ZuEQ7CAgfHq3ViUC3F+3qmR4vEmNs4Bt8rbKsqvvunNgjcm
iYx/kmECgYEA+CsDqsAJpQmX1pMSgniDcPUsMoVLF06eTyLUAYYY5LnWDnP8losi
7lL6+OcULorF1eXw+FqK4IhNpIk3MZC2uVCT2WkK/B8WAOQtB+OHb1kV8wkEQPbY
UUQfvkp9E/D3ByV6CRpuMhE6jrBUR37HXqEr7+HWSJ1koj3lD9nR6V8CgYEA4Bpn
lJd2pPZTv5Wh/DdWNNpT9hwcwi7r5oRQPTAtdiHNq8Z+6USMwjvBd7KI6UOrfSxP
VBatl8ve9FhYFlNQXeUeGaUZXfWd5Z3dQ2Y5VtnP13SHJT162Wmt4i6nPpVwwVvJ
6QgPggfM3xdNDbiF5x6T/Zgh5V/Tmky+xGkz2pECgYEAnZ/kkl2rQpIXSQjdJtWY
1vRCgEw9Z65dyvHaKqWbxhtrJH7zHkN9ilZWZiWPoggupC+KoJQRxY+NkUY+MlMy
W/4cCmk3uu+bsDE9kNcpvMWetWEyvHiM6QEWEG2LiFDy9i0NmB6bg12CDgNdZJPX
2fkQySpuSmz98DbT+P9m3o0CgYBwWcyEGktI+JWT/xhuse9uH+boA8AHOi7aKotv
oa+pAdlyvNjzaYKH/h1IPSGWkG5xGr3KknQFHhhwt7mxt6Ma77rfcH3/NRwr+bDs
EVu9xwUEJ095xBDK3shmFK2UGqekyLe5NGlR70cusSfYMSIwdIwNHzAfJqOXP9KD
9ZohgQKBgQCVgkGXKhncre6t8JYgjLplwAnuMWTatMQK+qtCaR29KSy6LeXW71Je
1J2fk91Z6+o0d31eTI5mOH9RBvJMGLpOkWw5769vDGNiIn3PiVK4ezdd2Zwz2T3U
c7unPf36AHohqWJgqn6L9z2PZRDplEs/82uzKzEvmFhMFWyyBZKtGg==
-----END RSA PRIVATE KEY-----
'''
    self.pemFile = "%s/qemu.pem" % os.getcwd()

    # remove file if exists..
    try:
        os.remove(self.pemFile)
    except OSError:
        pass

    with open(self.pemFile, 'w') as fhPem:
      fhPem.write(self.pemText)

    os.chmod(self.pemFile, stat.S_IREAD)

    self.cmd = '%s %s -m %d -device pci-inkling %s -device e1000,netdev=net0 -netdev user,id=net0,hostfwd=tcp::%d-:22 -serial file:log-qemu_serial.txt' % (qiPath, localVdi, mem, qemuOpts, port)
    if os.path.exists("/dev/kvm"):
        self.cmd += "  --enable-kvm "
    self.port = port
    self.cmdForSsh = 'ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=600 -p %d -i %s ubuntu@localhost' % (self.port, self.pemFile)
    self.cmdForRsync = 'rsync -av --progress -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=600 -p %s -i %s"' % (self.port, self.pemFile)

  def start(self):
    cmd = 'sh -c "%s 2>&1 | tee log-qemu.txt"' % self.cmd
    print("INFO: starting Qemu  %s" % cmd, flush=True)
    self.fh = pexpect.spawn(cmd)
    self.fh.expect("Inkling SOC")
    self.fh.send("\r")
    time.sleep(60)  # ssh to the qemu guest is getting random errors, maybe this can help

  def testGuest(self, phaseId, numAttempts):
    # Make sure the qemu quest is functional
    for attempId in range(numAttempts):
      print("\nINFO: testGuest  phase %d  attempt %d" % (phaseId, attempId), flush=True)
      testFile = "test_qemu_guest-%02d-%02d.txt" % (phaseId, attempId)
      testFileVm = "/tmp/" + testFile
      testFileReturned = testFile.replace(".txt", "-ret.txt")
      with open(testFile, 'w') as f:
        f.write("Test attempt %02d" % attempId)
      self.rsyncToVm(testFile, testFileVm)
      self.rsyncFromVm(testFileVm, testFileReturned)
      if os.path.isfile(testFileReturned):
        print("INFO: testGuest PASSED after attempt %d\n" % attempId, flush=True)
        return True
      print("INFO: testGuest diagnosing ssh connection %d" % attempId, flush=True)
      self.sshCmd("/bin/true", "-vvv")  # Baseline diagnostics
    return False
  
  def stop(self):
    self.rsyncFromVm("/var/log/syslog", ".")
    try:
      self.fh.expect("Something non-existing to flush logs...", timeout=5)
    except:
      pass
    print("INFO: checking for zero-size files:", flush=True)
    os.system("find -size 0")
    print("INFO: stopping QEMU")
    try:
      self.fh.close()
    except:
      pass
  def rsyncToVm(self, fromDir, toVmDir, opts=None):
    cmd = '%s %s ubuntu@localhost:%s' % (self.cmdForRsync, fromDir, toVmDir)
    if opts != None:
      cmd = cmd.replace("rsync ", "rsync %s " % opts)
    print("INFO: rsyncToVm executing %s" % cmd, flush=True)
    os.system(cmd)
  def rsyncFromVm(self, fromVmDir, toDir):
    cmd = '%s ubuntu@localhost:%s %s' % (self.cmdForRsync, fromVmDir, toDir)
    print("INFO: rsyncFromVm executing %s" % cmd, flush=True)
    os.system(cmd)
  def sshCmd(self, cmd, opt=""):
    fullCmd = "%s %s '%s'" % (self.cmdForSsh, opt, cmd)
    print("INFO: sshCmd executing %s" % fullCmd, flush=True)
    os.system(fullCmd)
    
    
class Krt:
  def __init__(self, qemu):
    self.qemu = qemu
    self.cwd = os.getcwd()

    self.install()

  def install(self):
    runtimSrcPath = os.environ["KAENA_RT_PATH"]
    if not os.path.isdir(runtimSrcPath):
      raise ValueError("ERROR: missing runtime src at %s" % runtimSrcPath)
    krtPackages = glob.glob(os.path.join(krtBldPath, "krt-*.*-uio-core.tar.gz"))
    if len(krtPackages) != 1:
      raise ValueError("ERROR: Found {} runtime packages at {}".format(len(krtPackages), krtBldPath))
    self.qemu.rsyncToVm(krtPackages[0], krtVmPath + "/")
    self.qemu.sshCmd("sudo tar xfz {} -C /usr/".format(krtVmPath + "/krt-*.*-uio-core.tar.gz"))

    self.qemu.rsyncToVm(os.path.join(runtimSrcPath, "uio_drv"), krtVmPath)
    self.qemu.sshCmd("sudo sysctl -w vm.nr_hugepages=128")
    self.qemu.sshCmd("cd %s/uio_drv; make; sudo ./load.sh" % krtVmPath)

  def addModel(self, kelfDir, kelfVmDir):
    self.kelfVmDir = kelfVmDir
    self.qemu.rsyncToVm(kelfDir + "/", kelfVmDir, "--copy-links")
    cmdCompile = 'cd %s; kelf2kbin def.json' % (kelfVmDir)
    self.qemu.sshCmd(cmdCompile)
  def start(self):
    self.ifmapDir = "%s/ifmap" % self.kelfVmDir
    self.ofmapDir = "%s/ofmap" % self.kelfVmDir
    self.qemu.sshCmd("mkdir %s %s" % (self.ifmapDir, self.ofmapDir))
    cmdRuntime = 'cd %s; sudo kbin_rt %s %s %s > log-krt.txt 2>&1 &' % (self.kelfVmDir, self.kelfVmDir, self.ifmapDir, self.ofmapDir)
    self.qemu.sshCmd(cmdRuntime)
  def stop(self):
    self.qemu.rsyncFromVm(self.kelfVmDir + "/log-krt.txt", ".")
    debug = True
    if debug:
      self.qemu.rsyncFromVm(self.kelfVmDir + "/", "debug_kelf")
  def inference(self, ifmap, ofmap):
    self.qemu.rsyncToVm(os.path.realpath(ifmap), self.ifmapDir, "--copy-links")
    inklingTimeout = 3600  # Later pass from the client
    self.qemu.sshCmd('pidofp=$(pidof kbin_rt); count=0; until [ -f %s/out.bin -o $count -gt %d ] || [ -z $pidofp ]; do sleep 1 ; pidofp=$(pidof kbin_rt); let count++; echo $count; done' % (self.ofmapDir, inklingTimeout))
    self.qemu.rsyncFromVm(self.ofmapDir + "/out.bin", ofmap)


qemuOk = False
port = args.port
for qemuRestartId in range(3):
  while portInUse(port):
    port += 3
  print("INFO: using available port %d  (--port was %d)" % (port, args.port))
  qemu = Qemu(args.vdi, args.mem, args.port)
  qemu.start()
  if qemu.testGuest(qemuRestartId, 4):
    qemuOk = True
    krt = Krt(qemu)
    krt.addModel(args.kelf, "/tmp/reg-1")
    krt.start()
    for ifmap in args.ifmaps:
      krt.inference(ifmap, "out-local.bin")
    krt.stop()
  else:
    print("ERROR: Failed to start Qemu  phase %d, restarting ..." % qemuRestartId)
  qemu.stop()
  if qemuOk:
    break
  else:
    time.sleep(60)  # qemu was still failing upon several restarts. Delay after stop() may help.
if not qemuOk:
    raise ValueError("Failed to start QEMU")

