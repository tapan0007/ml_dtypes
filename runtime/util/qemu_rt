#!/usr/bin/env python3

# Copyright (C) 2018, Amazon.com. All Rights Reserved


# Kaena qemu Inkling runtime wrapper
# Sample command
#   # Unpack kelf to ./kelf
#   \rm -rf qemu-log.txt copy.vdi
#   /work1/zejdaj/git_repo/kaena-compiler/runtime/util/qemu_rt --kelf kelf --ifmaps kelf/trivnet_input:0_NCHW.npy
#  Test regressions by e.g.
#    RunAll --force_qemu --parallel 16 --test_re wave --select not_waived >& log
#  The disk image is added to S3 by e.g,
#    aws s3 cp /work1/zejdaj/git_repo/qemu_inkling/my_vm.img s3://kaena-vdi/lubuntu_20180525 --profile kaena
#  and in future we'll use the  kaena-compiler/runtime/util/vdi/vdi_manager.py to create and populate VDIs

import argparse
import os, sys, json, re, stat, time
import shutil, pexpect

print("\nINFO: started as  ", " ".join(["'"+word+"'" if " " in word else word for word in sys.argv]), flush=True)
qiPath = os.environ["KAENA_PATH"] + "/../qemu_inkling"
if not os.path.isdir(qiPath):
  raise("ERROR: missing $KAENA_PATH/../qemu_inkling path  at %s" % qiPath)
krtPath = os.environ["KAENA_RT_PATH"]
gitVmPath = '/home/ubuntu/git'
krtVmPath = '/home/ubuntu/git/kaena-runtime'
if not os.path.isdir(krtPath):
  raise("ERROR: missing kaena runtime path on the qemu")

defaultVdi = "s3://kaena-vdi/lubuntu_20180525.img"

parser = argparse.ArgumentParser()
parser.add_argument('--action', help='Default is inference, others are vdi, build', default="inference")
parser.add_argument('--vdi', help='Path to virtual disk image for the qemu VM. It can be file or S3 URL including options, the default is ' + defaultVdi, default=defaultVdi)
parser.add_argument('--port', help='SSH port for the qemu VM', type=int, default=5555)
parser.add_argument('--mem', help='Memory for the qemu VM, default 1024MB', type=int, default=1024)
parser.add_argument('--kelf', help='Kelf directory to compile', default=None)
parser.add_argument('--ifmaps', help='List of input images in sim ifmap format', nargs='+', default=None)
args = parser.parse_args()
if args.kelf == None:
  raise(BaseException("ERROR: use --kelf"))

class Qemu:
  def __init__(self, vdi, mem, port):
    #qemuOpts = '-monitor stdio'
    qemuOpts = '-nographic'
    localVdi = "copy.vdi"
    if os.path.isfile(vdi):
      cmd = "/bin/cp %s %s" % (vdi, localVdi)
      print('INFO: copying vdi  "%s"' % cmd, flush=True)
      os.system(cmd)
    elif vdi[0:5].upper() == 'S3://':
      cmd = "aws s3 cp %s %s %s" % (vdi, localVdi, "--profile kaena")
      print('INFO: copying vdi from S3 by  "%s"' % cmd, flush=True)
      os.system(cmd)
    else:
      raise('ERROR: unknown vdi specification "%s"' % vdi)
    assert os.path.isfile(localVdi)
    
    # Create on the fly to avoid issues with git chmod
    self.pemText = '''
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA2T87/SGMJkXPqDtZ2paK315Nh6aEZciDj4YiTwOJ70Ti0yiG
ej1iDrtnBy40TFWzvcwIkus3a/cTlOuflk2yE1kaVbnMMUMIGBV/K82nG9m4/c+G
0rdnz3PwAtCnuDkeGGP7ew6FVp8XQ4GSdCt8qgdHuhIKAiVgb0xNXwXo1++mgQBU
hPCHKhNHCRdw7Z3GgRTdtddUe3xPZNaBA0qk2HKe/LtqJGik490/yhNW+QIBnXye
XFoT32hPbTkU3GymmNCrSET+HxmwdeUqpspRrZnDZeJ7JV/H4cDpBkWjQFY5D1PX
g8G8ia+szTZyDauA5gZJM/Z7PD66vOm8lY0UzwIDAQABAoIBAFwkwvfxg7U0BQjQ
66KYGZz2LaIskZluO8bjWKf000tmB2MSnD86y919xQw5n7sE2rDU2ooeNCqZ6HdQ
nSauG6qzL0VPAfme+c7lR0Q3/PoGFb2piQDVA7Xs8c7v20N7DnW/6oleNlXwMnjS
e2DElSK05cpZHl+cpNNwJJz6L7FuTvvcltfn9DluDkqODTr/dfJ8JXXedudBCYP5
GL/74rnUsxhk7aozrIZy3Q4sCUyvgyjRU9mMLqIWmK2SPrrYsMGU5QTalVlHpSnG
GtkmVD+eGCPL07kN5ZuEQ7CAgfHq3ViUC3F+3qmR4vEmNs4Bt8rbKsqvvunNgjcm
iYx/kmECgYEA+CsDqsAJpQmX1pMSgniDcPUsMoVLF06eTyLUAYYY5LnWDnP8losi
7lL6+OcULorF1eXw+FqK4IhNpIk3MZC2uVCT2WkK/B8WAOQtB+OHb1kV8wkEQPbY
UUQfvkp9E/D3ByV6CRpuMhE6jrBUR37HXqEr7+HWSJ1koj3lD9nR6V8CgYEA4Bpn
lJd2pPZTv5Wh/DdWNNpT9hwcwi7r5oRQPTAtdiHNq8Z+6USMwjvBd7KI6UOrfSxP
VBatl8ve9FhYFlNQXeUeGaUZXfWd5Z3dQ2Y5VtnP13SHJT162Wmt4i6nPpVwwVvJ
6QgPggfM3xdNDbiF5x6T/Zgh5V/Tmky+xGkz2pECgYEAnZ/kkl2rQpIXSQjdJtWY
1vRCgEw9Z65dyvHaKqWbxhtrJH7zHkN9ilZWZiWPoggupC+KoJQRxY+NkUY+MlMy
W/4cCmk3uu+bsDE9kNcpvMWetWEyvHiM6QEWEG2LiFDy9i0NmB6bg12CDgNdZJPX
2fkQySpuSmz98DbT+P9m3o0CgYBwWcyEGktI+JWT/xhuse9uH+boA8AHOi7aKotv
oa+pAdlyvNjzaYKH/h1IPSGWkG5xGr3KknQFHhhwt7mxt6Ma77rfcH3/NRwr+bDs
EVu9xwUEJ095xBDK3shmFK2UGqekyLe5NGlR70cusSfYMSIwdIwNHzAfJqOXP9KD
9ZohgQKBgQCVgkGXKhncre6t8JYgjLplwAnuMWTatMQK+qtCaR29KSy6LeXW71Je
1J2fk91Z6+o0d31eTI5mOH9RBvJMGLpOkWw5769vDGNiIn3PiVK4ezdd2Zwz2T3U
c7unPf36AHohqWJgqn6L9z2PZRDplEs/82uzKzEvmFhMFWyyBZKtGg==
-----END RSA PRIVATE KEY-----
'''
    self.pemFile = "%s/qemu.pem" % os.getcwd()
    with open(self.pemFile, 'w') as fhPem:
      fhPem.write(self.pemText)
    os.chmod(self.pemFile, stat.S_IREAD)
    
    self.cmd = '%s/x86_64-softmmu/qemu-system-x86_64 %s -m %d -device pci-inkling %s -device e1000,netdev=net0 -netdev user,id=net0,hostfwd=tcp::%d-:22' % (qiPath, localVdi, mem, qemuOpts, port)
    self.port = port
    self.cmdForSsh = 'ssh -n -o StrictHostKeyChecking=no -o ConnectTimeout=600 -p %d -i %s ubuntu@localhost' % (self.port, self.pemFile)
    self.cmdForRsync = 'rsync -av --progress -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=600 -p %s -i %s"' % (self.port, self.pemFile)
  def start(self):
    print("INFO: starting Qemu  %s" % self.cmd, flush=True)
    logFh = open("log-qemu.txt", 'wb')
    self.fh = pexpect.spawn(self.cmd, logfile=logFh)
    self.fh.expect("Inkling SOC")
    self.fh.send("\r")
    time.sleep(60)  # ssh to the qemu guest is getting random errors, maybe this can help

  def testGuest(self, numAttempts):
    # Make sure the qemu quest is functional
    for attempId in range(numAttempts):
      print("\nINFO: testGuest attempt %d" % attempId, flush=True)
      testFile = "test_qemu_guest-%02d.txt" % attempId
      testFileVm = "/tmp/" + testFile
      testFileReturned = testFile.replace(".txt", "-ret.txt")
      with open(testFile, 'w') as f:
        f.write("Test attempt %02d" % attempId)
      self.rsyncToVm(testFile, testFileVm)
      self.rsyncFromVm(testFileVm, testFileReturned)
      if os.path.isfile(testFileReturned):
        print("INFO: testGuest PASSED after attempt %d\n" % attempId, flush=True)
        return True
      print("INFO: testGuest diagnosing ssh connection %d" % attempId, flush=True)
      self.sshCmd("/bin/true", "-vvv")  # Baseline diagnostics
    return False
  
  def stop(self):
    self.rsyncFromVm("/var/log/syslog", ".")
    try:
      self.fh.expect("Something non-existing to flush logs...", timeout=5)
    except:
      pass
    print("INFO: checking for zero-size files:", flush=True)
    os.system("find -size 0")
    print("INFO: stopping QEMU")
    try:
      self.fh.close()
    except:
      pass
  def rsyncToVm(self, fromDir, toVmDir, opts=None):
    cmd = '%s %s ubuntu@localhost:%s' % (self.cmdForRsync, fromDir, toVmDir)
    if opts != None:
      cmd = cmd.replace("rsync ", "rsync %s " % opts)
    print("INFO: rsyncToVm executing %s" % cmd, flush=True)
    os.system(cmd)
  def rsyncFromVm(self, fromVmDir, toDir):
    cmd = '%s ubuntu@localhost:%s %s' % (self.cmdForRsync, fromVmDir, toDir)
    print("INFO: rsyncFromVm executing %s" % cmd, flush=True)
    os.system(cmd)
  def sshCmd(self, cmd, opt=""):
    fullCmd = "%s %s '%s'" % (self.cmdForSsh, opt, cmd)
    print("INFO: sshCmd executing %s" % fullCmd, flush=True)
    os.system(fullCmd)
    
    
class Krt:
  def __init__(self, qemu):
    self.qemu = qemu
    self.cwd = os.getcwd()
    self.qemu.rsyncToVm(krtPath, gitVmPath + "/")
  def addModel(self, kelfDir, kelfVmDir):
    self.kelfVmDir = kelfVmDir
    self.qemu.rsyncToVm(kelfDir + "/", kelfVmDir, "--copy-links")
    cmdCompile = 'cd %s; %s/kelf-parse/out/kelf2kbin def.json' % (kelfVmDir, krtVmPath)
    self.qemu.sshCmd(cmdCompile)
  def start(self):
    self.ifmapDir = "%s/ifmap" % self.kelfVmDir
    self.ofmapDir = "%s/ofmap" % self.kelfVmDir
    self.qemu.sshCmd("mkdir %s %s" % (self.ifmapDir, self.ofmapDir))
    self.qemu.sshCmd("cd %s; cd uio_drv; make; cd ../udmabuf; make" % krtVmPath)
    self.qemu.sshCmd("cd %s/udmabuf; sudo ./load.sh; cd %s/uio_drv; sudo ./load.sh" % (krtVmPath, krtVmPath))
    cmdRuntime = 'cd %s; %s/kbin_rt/out/lkbin %s %s %s > log-krt.txt 2>&1 &' % (self.kelfVmDir, krtVmPath, self.kelfVmDir, self.ifmapDir, self.ofmapDir)
    self.qemu.sshCmd(cmdRuntime)
  def stop(self):
    self.qemu.rsyncFromVm(self.kelfVmDir + "/log-krt.txt", ".")
    debug = True
    if debug:
      self.qemu.rsyncFromVm(self.kelfVmDir + "/", "debug_kelf")
  def inference(self, ifmap, ofmap):
    self.qemu.rsyncToVm(os.path.realpath(ifmap), self.ifmapDir, "--copy-links")
    inklingTimeout = 3600  # Later pass from the client
    self.qemu.sshCmd('count=0; until [ -f %s/out.bin -o $count -gt %d ]; do sleep 1 ; let count++; echo $count; done' % (self.ofmapDir, inklingTimeout))
    self.qemu.rsyncFromVm(self.ofmapDir + "/out.bin", ofmap)


qemu = Qemu(args.vdi, args.mem, args.port)
qemu.start()
if qemu.testGuest(10):
  krt = Krt(qemu)
  krt.addModel(args.kelf, "/tmp/reg-1")
  krt.start()
  for ifmap in args.ifmaps:
    krt.inference(ifmap, "out-local.bin")
  krt.stop()
else:
  raise("Failed to start QEMU")
qemu.stop()


''' Dump of random instructions for future --action vdi and --action buil
cd ../qemu_inkling/
./configure --target-list=x86_64-softmmu
make

#wget http://ro-mirrors.evowise.com/ubuntu-releases/18.04/ubuntu-18.04-live-server-amd64.iso
wget http://cdimage.ubuntu.com/lubuntu/releases/18.04/release/lubuntu-18.04-alternate-amd64.iso

./qemu-img create my_vm.img 4G
#./x86_64-softmmu/qemu-system-x86_64 -boot d -cdrom ~/Downloads/ubuntu-18.04-live-server-amd64.iso -m 512 -hda my_vm.img
./x86_64-softmmu/qemu-system-x86_64 -boot d -cdrom lubuntu-18.04-alternate-amd64.iso -m 512 -hda my_vm.img

./x86_64-softmmu/qemu-system-x86_64 ./my_vm.img -m 1024 -device pci-inkling -monitor stdio -device e1000,netdev=net0,mac=52:55:00:d1:55:01 -netdev user,id=net0,hostfwd=tcp::5555-:22

# copy runtime and arch isa
rsync -av --progress -e 'ssh -p 5555 -i ~/.ssh/lubuntu.pem' $KAENA_RT_PATH/ ubuntu@localhost:/home/ubuntu/git/
rsync -av --progress -e 'ssh -p 5555 -i ~/.ssh/lubuntu.pem' $ARCH_ISA_PATH/ ubuntu@localhost:/home/ubuntu/git/
rsync -av --progress -e 'ssh -p 5555 -i ~/.ssh/lubuntu.pem' /tmp/0-1conv0.tgz ubuntu@localhost:/home/ubuntu/git/

ssh -p 5555 -i "~/.ssh/lubuntu.pem" ubuntu@localhost
  sudo apt install make libelf-dev gcc tcl tcl8.5-dev environment-modules python3-pip 
  sudo pip3 install numpy scipy
  git clean -f -d -x
  cd udmabuf/
  make
  cd ../hal
  make PLAT=uio
  cd ../uio_drv/
  make
  cd ../kbinlib
  make
  cd ../kbin_rt
  make
  cd ../kelf-parse
  make
  
  # Inference
  cd ~/git/udmabuf;  sudo ./load.sh
  cd ~/git/uio_drv; sudo ./load.sh
  
  
  cd ~/git
  rsync -av --progress -e "ssh -p 5555 -i ~/.ssh/lubuntu.pem" 0-1conv0_wave ubuntu@localhost:/home/ubuntu/git/ref-0-1conv0_wave
  tar xvzf 0-1conv0.tgz 
  mkdir ~/ifmap ~/ofmap
  ./kbin_rt/out/lkbin ./0-1conv0 ~/ifmap ~/ofmap
  cp ref-0-1conv0_wave/0-1conv0_wave/sg00/trivnet_input:0_NCHW.npy ~/ifmap/
  python3
    import numpy as np
    a = np.fromfile("/home/ubuntu/ofmap/out.bin", dtype=np.float16)
    print(a)

   cd ~/gin/kelf-parse/
   make
  cd ~/git/t2
  ~/git/kelf-parse/out/test def.json 
  cd ~/git
  ./kbin_rt/out/lkbin ./t2 ~/ifmap ~/ofmap



/etc/init.d/kaena
#!/bin/sh
echo Executing Kaena RT drivers from /etc/rc.local
cd /home/ubuntu/git/udmabuf; ./load.sh
cd /home/ubuntu/git/uio_drv; ./load.sh
exit 0

cd /etc/rc2.d/
ln -s ../init.d/kaena S90kaena
2,3,4,5

ls -la /dev/udmabuf* /dev/uio*
/dev/udmabuf0  /dev/udmabuf1  /dev/udmabuf2  /dev/udmabuf3  /dev/uio0


chmod a+rwX /dev/udmabuf*
chmod a+rwX /dev/uio*



#!/bin/sh
echo Executing Kaena RT drivers

echo KAENA before driver load
lsmod
cd /home/ubuntu/git/udmabuf; ./load.sh
cd /home/ubuntu/git/uio_drv; ./load.sh

echo KAENA after driver load
lsmod

echo Waiting for Kaena drivers ...
until test -c /dev/udmabuf0; do sleep 1; done
until test -c /dev/uio0; do sleep 1; done
chmod a+rwX /dev/udmabuf* /dev/uio*
/bin/ls -la /dev/udmabuf* /dev/uio*

exit 0

The above did not work due to udev, instead do sudo from user space later
sudo visudo
  ubuntu ALL=(ALL) NOPASSWD: ALL



udevadm info -a -p $(udevadm info -q path -n /dev/uio0)

/etc/udev/rules.d/80-kaena.rules
SUBSYSTEM=="pci", ATTRS{vendor}=="0x1c36", ATTRS{device}=="0x0001", OWNER="root", GROUP="root", MODE="0660"



'''

