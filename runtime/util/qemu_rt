#!/usr/bin/env python3

# Copyright (C) 2018, Amazon.com. All Rights Reserved


# Kaena qemu Inkling runtime wrapper
# Sample command
#   # Unpack kelf to ./kelf
#   \rm -rf qemu-log.txt copy.vdi
#   /work1/zejdaj/git_repo/kaena-compiler/runtime/util/qemu_rt --kelf kelf --ifmaps kelf/trivnet_input:0_NCHW.npy


import argparse
import os.path
import sys, json, re
import shutil, pexpect

print("\nINFO: started as  ", " ".join(["'"+word+"'" if " " in word else word for word in sys.argv]))
qiPath = os.environ["KAENA_PATH"] + "/../qemu_inkling"
if not os.path.isdir(qiPath):
  raise("ERROR: missing $KAENA_PATH/../qemu_inkling path  at %s" % qiPath)
krtPath = os.environ["KAENA_RT_PATH"]
gitVmPath = '/home/ubuntu/git'
krtVmPath = '/home/ubuntu/git/kaena-runtime'
#if not os.path.isdir(krtPath):
#  raise("ERROR: missing kaena runtime path on the qemu")

parser = argparse.ArgumentParser()
parser.add_argument('--action', help='Default is inference, others are vdi, build', default="inference")
parser.add_argument('--vdi', help='Path to virtual disk image for the qemu VM', default="/work1/zejdaj/git_repo/qemu_inkling/my_vm.img")
parser.add_argument('--port', help='SSH port for the qemu VM', type=int, default=5555)
parser.add_argument('--mem', help='Memory for the qemu VM, default 1024MB', type=int, default=1024)
parser.add_argument('--kelf', help='Kelf directory to compile', default=None)
parser.add_argument('--ifmaps', help='List of input images in sim ifmap format', nargs='+', default=None)
args = parser.parse_args()
if args.kelf == None:
  raise(BaseException("ERROR: use --kelf"))

class Qemu:
  def __init__(self, vdi, mem, port):
    self.pem = "%s/%s" % (qiPath, "lubuntu.pem")
    qemuOpts = '-nographic -vnc :55'
    #qemuOpts = '-vnc :55'
    localVdi = "copy.vdi"
    cmd = "/bin/cp %s %s" % (vdi, localVdi)
    print("INFO: copying vdi  %s" % cmd)
    os.system(cmd)
    
    self.cmd = '%s/x86_64-softmmu/qemu-system-x86_64 %s -m %d -device pci-inkling %s -device e1000,netdev=net0 -netdev user,id=net0,hostfwd=tcp::%d-:22' % (qiPath, localVdi, mem, qemuOpts, port)
    self.port = port
    self.cmdForSsh = 'ssh -n -p %d -i %s ubuntu@localhost' % (self.port, self.pem)
    #self.cmdForRsync = 'rsync -av --copy-links --progress -e "ssh -p %s -i %s"' % (self.port, self.pem)
    self.cmdForRsync = 'rsync -av --progress -e "ssh -p %s -i %s"' % (self.port, self.pem)
  def start(self):
    print("INFO: Qemu started  %s" % self.cmd)
    #self.fh = os.popen(self.cmd)
    logFh = open("qemu-log.txt", 'wb')
    self.fh = pexpect.spawn(self.cmd, logfile=logFh)
    self.fh.expect("Inkling SOC")
    self.fh.send("\r")
  def stop(self):
    self.rsyncFromVm("/var/log/syslog", ".")
    self.fh.expect("Something non-existing to flush logs...", timeout=5)
    self.fh.close()
  def rsyncToVm(self, fromDir, toVmDir, opts=None):
    cmd = '%s %s ubuntu@localhost:%s' % (self.cmdForRsync, fromDir, toVmDir)
    if opts != None:
      cmd = cmd.replace("rsync ", "rsync %s " % opts)
    print("INFO: rsyncToVm executing %s" % cmd, flush=True)
    os.system(cmd)
  def rsyncFromVm(self, fromVmDir, toDir):
    cmd = '%s ubuntu@localhost:%s %s' % (self.cmdForRsync, fromVmDir, toDir)
    print("INFO: rsyncFromVm executing %s" % cmd, flush=True)
    os.system(cmd)
  def sshCmd(self, cmd):
    fullCmd = "%s '%s'" % (self.cmdForSsh, cmd)
    print("INFO: sshCmd executing %s" % fullCmd, flush=True)
    os.system(fullCmd)
    
    
class Krt:
  def __init__(self, qemu):
    self.qemu = qemu
    self.cwd = os.getcwd()
    self.qemu.rsyncToVm(krtPath, gitVmPath + "/")
  def addModel(self, kelfDir, kelfVmDir):
    self.kelfVmDir = kelfVmDir
    # Symlinks do not seem to work in ssh/rsync/qemu
    self.qemu.rsyncToVm(kelfDir + "/", kelfVmDir, "--copy-links")
    #kelfDirDeref = "kelf_no_links"
    #cmd = "/bin/cp -rL %s %s" % (kelfDir, kelfDirDeref)
    #os.system(cmd)
    #self.qemu.rsyncToVm(kelfDir + "/", kelfVmDir)
    cmdCompile = 'cd %s; %s/kelf-parse/out/kelf2kbin def.json' % (kelfVmDir, krtVmPath)
    self.qemu.sshCmd(cmdCompile)
  def start(self):
    self.ifmapDir = "%s/ifmap" % self.kelfVmDir
    self.ofmapDir = "%s/ofmap" % self.kelfVmDir
    self.qemu.sshCmd("mkdir %s %s" % (self.ifmapDir, self.ofmapDir))
    self.qemu.sshCmd("cd %s; cd uio_drv; make; cd ../udmabuf; make" % krtVmPath)
    self.qemu.sshCmd("cd %s/udmabuf; sudo ./load.sh; cd %s/uio_drv; sudo ./load.sh" % (krtVmPath, krtVmPath))
    cmdRuntime = 'cd %s; %s/kbin_rt/out/lkbin %s %s %s > krt-log.txt 2>&1 &' % (self.kelfVmDir, krtVmPath, self.kelfVmDir, self.ifmapDir, self.ofmapDir)
    self.qemu.sshCmd(cmdRuntime)
  def stop(self):
    self.qemu.rsyncFromVm(self.kelfVmDir + "/krt-log.txt", ".")
    #self.fh.close()
  def inference(self, ifmap, ofmap):
    self.qemu.rsyncToVm(os.path.realpath(ifmap), self.ifmapDir, "--copy-links")
    self.qemu.sshCmd("until test -f %s/out.bin; do sleep 1; done" % self.ofmapDir)
    self.qemu.rsyncFromVm(self.ofmapDir + "/out.bin", ofmap)


qemu = Qemu(args.vdi, args.mem, args.port)
qemu.start()
krt = Krt(qemu)
krt.addModel(args.kelf, "/tmp/reg-1")
krt.start()
for ifmap in args.ifmaps:
  krt.inference(ifmap, "out-local.bin")
krt.stop()
qemu.stop()


''' Dump of random instructions for future --action vdi and --action buil
cd ../qemu_inkling/
./configure --target-list=x86_64-softmmu
make

#wget http://ro-mirrors.evowise.com/ubuntu-releases/18.04/ubuntu-18.04-live-server-amd64.iso
wget http://cdimage.ubuntu.com/lubuntu/releases/18.04/release/lubuntu-18.04-alternate-amd64.iso

./qemu-img create my_vm.img 4G
#./x86_64-softmmu/qemu-system-x86_64 -boot d -cdrom ~/Downloads/ubuntu-18.04-live-server-amd64.iso -m 512 -hda my_vm.img
./x86_64-softmmu/qemu-system-x86_64 -boot d -cdrom lubuntu-18.04-alternate-amd64.iso -m 512 -hda my_vm.img

./x86_64-softmmu/qemu-system-x86_64 ./my_vm.img -m 1024 -device pci-inkling -monitor stdio -device e1000,netdev=net0,mac=52:55:00:d1:55:01 -netdev user,id=net0,hostfwd=tcp::5555-:22

# copy runtime and arch isa
rsync -av --progress -e 'ssh -p 5555 -i ~/.ssh/lubuntu.pem' $KAENA_RT_PATH/ ubuntu@localhost:/home/ubuntu/git/
rsync -av --progress -e 'ssh -p 5555 -i ~/.ssh/lubuntu.pem' $ARCH_ISA_PATH/ ubuntu@localhost:/home/ubuntu/git/
rsync -av --progress -e 'ssh -p 5555 -i ~/.ssh/lubuntu.pem' /tmp/0-1conv0.tgz ubuntu@localhost:/home/ubuntu/git/

ssh -p 5555 -i "~/.ssh/lubuntu.pem" ubuntu@localhost
  sudo apt install make libelf-dev gcc tcl tcl8.5-dev environment-modules python3-pip 
  sudo pip3 install numpy scipy
  cd udmabuf/
  make
  cd ../hal
  make PLAN=uio
  cd ../uio_drv/
  make
  cd ../kbinlib
  make
  cd ../kbin_rt
  make
  cd ../kelf-parse
  make
  
  # Inference
  cd ~/git/udmabuf;  sudo ./load.sh
  cd ~/git/uio_drv; sudo ./load.sh
  
  
  cd ~/git
  rsync -av --progress -e "ssh -p 5555 -i ~/.ssh/lubuntu.pem" 0-1conv0_wave ubuntu@localhost:/home/ubuntu/git/ref-0-1conv0_wave
  tar xvzf 0-1conv0.tgz 
  mkdir ~/ifmap ~/ofmap
  ./kbin_rt/out/lkbin ./0-1conv0 ~/ifmap ~/ofmap
  cp ref-0-1conv0_wave/0-1conv0_wave/sg00/trivnet_input:0_NCHW.npy ~/ifmap/
  python3
    import numpy as np
    a = np.fromfile("/home/ubuntu/ofmap/out.bin", dtype=np.float16)
    print(a)

   cd ~/gin/kelf-parse/
   make
  cd ~/git/t2
  ~/git/kelf-parse/out/test def.json 
  cd ~/git
  ./kbin_rt/out/lkbin ./t2 ~/ifmap ~/ofmap



/etc/init.d/kaena
#!/bin/sh
echo Executing Kaena RT drivers from /etc/rc.local
cd /home/ubuntu/git/udmabuf; ./load.sh
cd /home/ubuntu/git/uio_drv; ./load.sh
exit 0

cd /etc/rc2.d/
ln -s ../init.d/kaena S90kaena
2,3,4,5

ls -la /dev/udmabuf* /dev/uio*
/dev/udmabuf0  /dev/udmabuf1  /dev/udmabuf2  /dev/udmabuf3  /dev/uio0


chmod a+rwX /dev/udmabuf*
chmod a+rwX /dev/uio*



#!/bin/sh
echo Executing Kaena RT drivers

echo KAENA before driver load
lsmod
cd /home/ubuntu/git/udmabuf; ./load.sh
cd /home/ubuntu/git/uio_drv; ./load.sh

echo KAENA after driver load
lsmod

echo Waiting for Kaena drivers ...
until test -c /dev/udmabuf0; do sleep 1; done
until test -c /dev/uio0; do sleep 1; done
chmod a+rwX /dev/udmabuf* /dev/uio*
/bin/ls -la /dev/udmabuf* /dev/uio*

exit 0

The above did not work due to udev, instead do sudo from user space later
sudo visudo
  ubuntu ALL=(ALL) NOPASSWD: ALL



udevadm info -a -p $(udevadm info -q path -n /dev/uio0)

/etc/udev/rules.d/80-kaena.rules
SUBSYSTEM=="pci", ATTRS{vendor}=="0x1c36", ATTRS{device}=="0x0001", OWNER="root", GROUP="root", MODE="0660"



'''

