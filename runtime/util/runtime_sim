#!/usr/bin/env python3

# Copyright (C) 2017, Amazon.com. All Rights Reserved
#
# Mini runtime environment for SIM
#
# Example:

import argparse
import os.path
import sys
import numpy as np


print("\nINFO: started as  ", " ".join(sys.argv), flush=True)

InklingPath = os.environ.get('INKLING_PATH')

parser = argparse.ArgumentParser()
#TODO: define followign two args
parser.add_argument('--input_fmaps', help='',
                    dest="input_fmaps", default=[], nargs='+',)
parser.add_argument('--output_fmaps', help='',
                    dest="output_fmap", default=[], nargs=2)
parser.add_argument('--parallel_streams', help='run execution engines in parallel', action='store_true', default=False)
args = parser.parse_args()
inputFmaps = args.input_fmaps
outputFmap = args.output_fmap
parallelStreams = args.parallel_streams
assert(len(inputFmaps) == 0) # embedded in tdb at the moment..
assert(len(outputFmap) == 0)


class RuntimeSim:
  def __init__(self):
    pass
  def run(self, inputFmaps, outputFmap):
    self.inputFmaps = inputFmaps
    self.outputFmap = outputFmap

    cmd = "%s/sim/sim" % (InklingPath)
    if args.parallel_streams:
      cmd += " --sp TrivNet-sp.tpb  --pe TrivNet-pe.tpb --pool TrivNet-pool.tpb --act TrivNet-act.tpb"
    else:
      cmd += " TrivNet.tpb"



    print("INFO: executing %s" % cmd, flush=True)
    ret = os.system(cmd)


runtime = RuntimeSim()
ret = runtime.run(inputFmaps, outputFmap)
exit(ret)