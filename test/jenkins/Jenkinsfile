
pipeline{

    agent {
        docker {
            image 'amazonlinux:latest'
            args '-u root -v /home/jenkins:/home/jenkins'
            label 'tonga'
            
        }
    }
    stages {
        stage('Prep'){
            steps {
                sh 'cat /etc/os-release'
                sh 'cat /proc/cpuinfo'
                sh 'df -h'

                sh 'ls -ltrA && rm -rf $WORKSPACE/* '
                sh 'mkdir -p ~/.ssh/ && echo "Host 10.206.*.*" >> ~/.ssh/config && echo "    User jenkins"  >> ~/.ssh/config && echo "    StrictHostKeyChecking no" >> ~/.ssh/config && echo "    IdentityFile /home/jenkins/.ssh/id_rsa" >> ~/.ssh/config && chmod 600 ~/.ssh/config'
    
                sh 'yum -y install git'
            }
        }
        stage('Checkout'){
    
            steps {
                sh 'ls -ltr'
                sh '''
                git clone ssh://10.206.30.60:29418/tonga/sw/kaena/krt  || echo clone failed
                git clone ssh://10.206.30.60:29418/tonga/sw/kaena/kcc  ||  echo clone failed
                git clone ssh://10.206.30.60:29418/tonga/sw/kaena/ext  ||  echo clone failed
                git clone ssh://10.206.30.60:29418/tonga/model/inkling ||  echo clone failed
                git clone ssh://10.206.30.60:29418/tonga/arch-isa ||  echo clone failed
                git -C krt pull origin $GERRIT_REFSPEC || echo "using kaena-runtime master"
                git -C kcc pull origin $GERRIT_REFSPEC || echo "using kaena-compiler master"
                git -C ext pull origin $GERRIT_REFSPEC || echo "using kaena-ext master"
                git -C inkling pull origin $GERRIT_REFSPEC || echo "using inkling master"
                git -C arch-isa pull origin $GERRIT_REFSPEC || echo "using arch-isa master"
		chmod -R 755 ./ 
                echo "export KAENA_PATH=$WORKSPACE/kcc" >> ~/.bashrc
                echo "export KAENA_EXT_PATH=$WORKSPACE/ext" >> ~/.bashrc
                echo "export INKLING_PATH=$WORKSPACE/inkling" >> ~/.bashrc
                echo "export KAENA_ISA_PATH=$WORKSPACE/arch-isa" >> ~/.bashrc
                echo "export ARCH_ISA_PATH=$WORKSPACE/arch-isa" >> ~/.bashrc
                echo "export KAENA_RT_PATH=$WORKSPACE/krt" >> ~/.bashrc
                '''
            }
        }
        stage('install deps'){
            steps {
                sh 'source ~/.bashrc && $KAENA_PATH/test/tools/fetch-and-run/alinux_deps_install || echo install deps failed'
            }
        }
        stage('Build') {
         
            steps {
                sh 'ls -ltr'
                sh 'source ~/.bashrc && make -C $KAENA_PATH'
                sh 'source ~/.bashrc && make PLAT=uio -C $KAENA_RT_PATH/hal/'
                sh 'source ~/.bashrc && make PLAT=dv -C $KAENA_RT_PATH/hal/'
                sh 'source ~/.bashrc && make PLAT=dummy -C $KAENA_RT_PATH/hal/'
                //archiveArtifacts artifacts: '**/output/*.tgz'
            }
        }
        stage('Regressions') {
    
            steps {
                sh 'source ~/.bashrc && make -C $KAENA_PATH check'
                //sh 'source ~/.bashrc && make -C $KAENA_INK_PATH check'
            }
        }
    }
    post {
        changed {
            script {
                    // Send an email only if the build status has changed from green/unstable to red
                    emailext subject: '$DEFAULT_SUBJECT',
                        body: '$DEFAULT_CONTENT',
                        recipientProviders: [
                            [$class: 'CulpritsRecipientProvider'],
                            [$class: 'DevelopersRecipientProvider'],
                            [$class: 'RequesterRecipientProvider']
                        ], 
                        replyTo: '$DEFAULT_REPLYTO',
                        to: '$DEFAULT_RECIPIENTS'
                }
        }
    }

}

