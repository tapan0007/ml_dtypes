
pipeline{

    agent {
        dockerfile {
            dir 'test/jenkins'
            customWorkspace './docker-shared'
            args '-u root -v /home/jenkins:/home/jenkins -v /home/jenkins/kaena/.aws:/root/.aws -v $WORKSPACE:/artifact'
            label 'kaena_c5.18xl'
        }
    }
    environment {
        SRC_DIR = "/workdir/src"
        BLD_DIR = "/workdir/build"
        TEST_DIR = "/workdir/test"

        KAENA_PATH = "$SRC_DIR/kaena-compiler"
        KAENA_EXT_PATH = "$SRC_DIR/kaena-ext"
        INKLING_PATH = "$SRC_DIR/inkling"
        QEMU_INKLING_PATH = "$SRC_DIR/qemu_inkling"
        ARCH_ISA_PATH = "$SRC_DIR/isa"
        KAENA_RT_PATH = "$SRC_DIR/kaena-runtime"

        KRT_BLD_DIR = "$BLD_DIR/krt"
        KRT_DV_BLD_DIR = "$BLD_DIR/krt_dv"
        KCC_BLD_DIR = "$BLD_DIR/kcc"
        QEMU_BLD_DIR = "$BLD_DIR/qemu"
    }
    stages {
        stage('Prep'){
            steps {
                sh 'cat /etc/os-release'
                sh 'cat /proc/cpuinfo'
                sh 'df -h'

                sh 'ls -ltrA'
                sh 'rm -rf $SRC_DIR && mkdir -p $SRC_DIR'
                sh 'rm -rf $BLD_DIR && mkdir -p $BLD_DIR'
                sh 'mkdir -p $KRT_BLD_DIR $KRT_DV_BLD_DIR $QEMU_BLD_DIR $KCC_BLD_DIR'
                sh 'rm -rf $TEST_DIR && mkdir -p $TEST_DIR'
            }
        }
        stage('Checkout'){

            steps {
                sh '''
                set -x

                cd $SRC_DIR
                ls -ltrA

                repo init -u ssh://siopt.review/tonga/sw/kaena/manifest
                [ -z "$MANIFEST_FILE_NAME" ] && export MANIFEST_FILE_NAME=default.xml
                repo init -m $MANIFEST_FILE_NAME
                repo sync -j 8

                git config --global user.name "Jenkins"
                git config --global user.email aws-tonga-kaena@amazon.com

                [ -z "$GERRIT_REFSPEC" ] || \
                git -C kaena-runtime pull origin $GERRIT_REFSPEC || \
                git -C kaena-compiler pull origin $GERRIT_REFSPEC || \
                git -C kaena-ext pull origin $GERRIT_REFSPEC || \
                git -C inkling pull origin $GERRIT_REFSPEC || \
                git -C qemu_inkling pull origin $GERRIT_REFSPEC || \
                git -C isa pull origin $GERRIT_REFSPEC

                chmod -R 755 ./
                ls -ltrA
                '''
            }
        }
        stage('install deps'){
            steps {
                sh '$KAENA_PATH/test/tools/fetch-and-run/alinux_deps_install || echo install deps failed'
            }
        }
        stage('Build') {
            parallel {
                stage('kcc') {
                    steps {
                        sh 'cd $KAENA_PATH && ./build.sh'
                    }
                }
                stage('krt') {
                    steps {
                        sh 'cd $KRT_BLD_DIR && cmake $KAENA_RT_PATH && make package'
                        sh 'cd $KRT_DV_BLD_DIR && PLAT=dv cmake $KAENA_RT_PATH && make package'
                    }
                    post {
                        success {
                            sh 'cp $KRT_BLD_DIR/krt-*.*.tar.gz /artifact/'
                            sh 'cp $KRT_DV_BLD_DIR/krt-*.*.tar.gz /artifact/'
                            archiveArtifacts artifacts:'krt-*.*.tar.gz'
                        }
                    }
                }
                stage('qemu') {
                    steps {
                        sh 'cd $QEMU_BLD_DIR && $QEMU_INKLING_PATH/configure --target-list=x86_64-softmmu --cxx=c++48 --cc=gcc48 && make -j'
                    }
                }
            }
        }
        stage('Regressions') {
            parallel {
                stage('qemu') {
                    steps {
                        timeout(time: 15, unit: 'MINUTES') {
                            sh 'cd $TEST_DIR && $KAENA_PATH/test/e2e/RunAll --test 0-1conv0_qemu_wave'
                        }
                    }
                    post {
                        failure {
                            sh 'find $TEST_DIR -type f -name "*.vdi" -delete'
                            sh 'find $TEST_DIR -iname "*.txt" -print0 | xargs -0 tar -czvf /artifact/test-result-logs.tgz'
                            sh 'tar -czvf /artifact/test-result-all.tgz $TEST_DIR'
                            archiveArtifacts artifacts:'*.tgz'
                        }
                    }
                }
                stage('level_0_1') {
                    steps {
                        timeout(time: 15, unit: 'MINUTES') {
                            sh 'cd $TEST_DIR && $KAENA_PATH/test/e2e/RunAll --test 0-1ap0 0-1ap7x7 0-1conv0_wave 0-1conv1ba1_h4c2m2_wave 0-1conv0_b16_wave'
                        }
                    }
                }
                stage('level_3') {
                    steps {
                        timeout(time: 15, unit: 'MINUTES') {
                            sh 'cd $TEST_DIR && $KAENA_PATH/test/e2e/RunAll --test 3-rn50-t00_wave 3-rn50_pool2_wave 3-rn50-13_wave'
                        }
                    }
                }
                stage('level_4') {
                    steps {
                        timeout(time: 15, unit: 'MINUTES') {
                            sh 'cd $TEST_DIR && $KAENA_PATH/test/e2e/RunAll --test 4-ptb_word_small1_host'
                        }
                    }
                }
                stage('hourly') {
                    steps {
                        timeout(time: 150, unit: 'MINUTES') {
                            sh 'cd $KAENA_PATH/test/e2e; [ -z "$RUNALL_ARGS" ] || ./RunAll $RUNALL_ARGS'
                        }
                    }
                }
            }
        }
    }
    post {
        changed {
            script {
                 if (!env.GERRIT_REFSPEC) { 
                     // Send an email only if the build status has changed from green/unstable to red
                     emailext subject: '$DEFAULT_SUBJECT',
                     body: '$DEFAULT_CONTENT',
                     recipientProviders: [
                             [$class: 'CulpritsRecipientProvider'],
                             [$class: 'DevelopersRecipientProvider'],
                             [$class: 'RequesterRecipientProvider']
                     ],
                       replyTo: '$DEFAULT_REPLYTO',
                     to: 'aws-tonga-kaena@amazon.com'
                 }
            }
        }
        always {
            sh 'df -h'
            cleanWs()
        }
    }
}

